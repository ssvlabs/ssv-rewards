// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Validator is an object representing the database table.
type Validator struct {
	PublicKey                        string      `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	Index                            null.Int    `boil:"index" json:"index,omitempty" toml:"index" yaml:"index,omitempty"`
	Active                           bool        `boil:"active" json:"active" toml:"active" yaml:"active"`
	BeaconStatus                     null.String `boil:"beacon_status" json:"beacon_status,omitempty" toml:"beacon_status" yaml:"beacon_status,omitempty"`
	BeaconEffectiveBalance           null.Int64  `boil:"beacon_effective_balance" json:"beacon_effective_balance,omitempty" toml:"beacon_effective_balance" yaml:"beacon_effective_balance,omitempty"`
	BeaconActivationEligibilityEpoch null.Int    `boil:"beacon_activation_eligibility_epoch" json:"beacon_activation_eligibility_epoch,omitempty" toml:"beacon_activation_eligibility_epoch" yaml:"beacon_activation_eligibility_epoch,omitempty"`
	BeaconActivationEpoch            null.Int    `boil:"beacon_activation_epoch" json:"beacon_activation_epoch,omitempty" toml:"beacon_activation_epoch" yaml:"beacon_activation_epoch,omitempty"`
	BeaconExitEpoch                  null.Int    `boil:"beacon_exit_epoch" json:"beacon_exit_epoch,omitempty" toml:"beacon_exit_epoch" yaml:"beacon_exit_epoch,omitempty"`
	BeaconSlashed                    null.Bool   `boil:"beacon_slashed" json:"beacon_slashed,omitempty" toml:"beacon_slashed" yaml:"beacon_slashed,omitempty"`
	BeaconWithdrawableEpoch          null.Int    `boil:"beacon_withdrawable_epoch" json:"beacon_withdrawable_epoch,omitempty" toml:"beacon_withdrawable_epoch" yaml:"beacon_withdrawable_epoch,omitempty"`

	R *validatorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L validatorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ValidatorColumns = struct {
	PublicKey                        string
	Index                            string
	Active                           string
	BeaconStatus                     string
	BeaconEffectiveBalance           string
	BeaconActivationEligibilityEpoch string
	BeaconActivationEpoch            string
	BeaconExitEpoch                  string
	BeaconSlashed                    string
	BeaconWithdrawableEpoch          string
}{
	PublicKey:                        "public_key",
	Index:                            "index",
	Active:                           "active",
	BeaconStatus:                     "beacon_status",
	BeaconEffectiveBalance:           "beacon_effective_balance",
	BeaconActivationEligibilityEpoch: "beacon_activation_eligibility_epoch",
	BeaconActivationEpoch:            "beacon_activation_epoch",
	BeaconExitEpoch:                  "beacon_exit_epoch",
	BeaconSlashed:                    "beacon_slashed",
	BeaconWithdrawableEpoch:          "beacon_withdrawable_epoch",
}

var ValidatorTableColumns = struct {
	PublicKey                        string
	Index                            string
	Active                           string
	BeaconStatus                     string
	BeaconEffectiveBalance           string
	BeaconActivationEligibilityEpoch string
	BeaconActivationEpoch            string
	BeaconExitEpoch                  string
	BeaconSlashed                    string
	BeaconWithdrawableEpoch          string
}{
	PublicKey:                        "validators.public_key",
	Index:                            "validators.index",
	Active:                           "validators.active",
	BeaconStatus:                     "validators.beacon_status",
	BeaconEffectiveBalance:           "validators.beacon_effective_balance",
	BeaconActivationEligibilityEpoch: "validators.beacon_activation_eligibility_epoch",
	BeaconActivationEpoch:            "validators.beacon_activation_epoch",
	BeaconExitEpoch:                  "validators.beacon_exit_epoch",
	BeaconSlashed:                    "validators.beacon_slashed",
	BeaconWithdrawableEpoch:          "validators.beacon_withdrawable_epoch",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ValidatorWhere = struct {
	PublicKey                        whereHelperstring
	Index                            whereHelpernull_Int
	Active                           whereHelperbool
	BeaconStatus                     whereHelpernull_String
	BeaconEffectiveBalance           whereHelpernull_Int64
	BeaconActivationEligibilityEpoch whereHelpernull_Int
	BeaconActivationEpoch            whereHelpernull_Int
	BeaconExitEpoch                  whereHelpernull_Int
	BeaconSlashed                    whereHelpernull_Bool
	BeaconWithdrawableEpoch          whereHelpernull_Int
}{
	PublicKey:                        whereHelperstring{field: "\"validators\".\"public_key\""},
	Index:                            whereHelpernull_Int{field: "\"validators\".\"index\""},
	Active:                           whereHelperbool{field: "\"validators\".\"active\""},
	BeaconStatus:                     whereHelpernull_String{field: "\"validators\".\"beacon_status\""},
	BeaconEffectiveBalance:           whereHelpernull_Int64{field: "\"validators\".\"beacon_effective_balance\""},
	BeaconActivationEligibilityEpoch: whereHelpernull_Int{field: "\"validators\".\"beacon_activation_eligibility_epoch\""},
	BeaconActivationEpoch:            whereHelpernull_Int{field: "\"validators\".\"beacon_activation_epoch\""},
	BeaconExitEpoch:                  whereHelpernull_Int{field: "\"validators\".\"beacon_exit_epoch\""},
	BeaconSlashed:                    whereHelpernull_Bool{field: "\"validators\".\"beacon_slashed\""},
	BeaconWithdrawableEpoch:          whereHelpernull_Int{field: "\"validators\".\"beacon_withdrawable_epoch\""},
}

// ValidatorRels is where relationship names are stored.
var ValidatorRels = struct {
	PublicKeyValidatorEvents       string
	PublicKeyValidatorPerformances string
}{
	PublicKeyValidatorEvents:       "PublicKeyValidatorEvents",
	PublicKeyValidatorPerformances: "PublicKeyValidatorPerformances",
}

// validatorR is where relationships are stored.
type validatorR struct {
	PublicKeyValidatorEvents       ValidatorEventSlice       `boil:"PublicKeyValidatorEvents" json:"PublicKeyValidatorEvents" toml:"PublicKeyValidatorEvents" yaml:"PublicKeyValidatorEvents"`
	PublicKeyValidatorPerformances ValidatorPerformanceSlice `boil:"PublicKeyValidatorPerformances" json:"PublicKeyValidatorPerformances" toml:"PublicKeyValidatorPerformances" yaml:"PublicKeyValidatorPerformances"`
}

// NewStruct creates a new relationship struct
func (*validatorR) NewStruct() *validatorR {
	return &validatorR{}
}

func (r *validatorR) GetPublicKeyValidatorEvents() ValidatorEventSlice {
	if r == nil {
		return nil
	}
	return r.PublicKeyValidatorEvents
}

func (r *validatorR) GetPublicKeyValidatorPerformances() ValidatorPerformanceSlice {
	if r == nil {
		return nil
	}
	return r.PublicKeyValidatorPerformances
}

// validatorL is where Load methods for each relationship are stored.
type validatorL struct{}

var (
	validatorAllColumns            = []string{"public_key", "index", "active", "beacon_status", "beacon_effective_balance", "beacon_activation_eligibility_epoch", "beacon_activation_epoch", "beacon_exit_epoch", "beacon_slashed", "beacon_withdrawable_epoch"}
	validatorColumnsWithoutDefault = []string{"public_key", "active"}
	validatorColumnsWithDefault    = []string{"index", "beacon_status", "beacon_effective_balance", "beacon_activation_eligibility_epoch", "beacon_activation_epoch", "beacon_exit_epoch", "beacon_slashed", "beacon_withdrawable_epoch"}
	validatorPrimaryKeyColumns     = []string{"public_key"}
	validatorGeneratedColumns      = []string{}
)

type (
	// ValidatorSlice is an alias for a slice of pointers to Validator.
	// This should almost always be used instead of []Validator.
	ValidatorSlice []*Validator
	// ValidatorHook is the signature for custom Validator hook methods
	ValidatorHook func(context.Context, boil.ContextExecutor, *Validator) error

	validatorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	validatorType                 = reflect.TypeOf(&Validator{})
	validatorMapping              = queries.MakeStructMapping(validatorType)
	validatorPrimaryKeyMapping, _ = queries.BindMapping(validatorType, validatorMapping, validatorPrimaryKeyColumns)
	validatorInsertCacheMut       sync.RWMutex
	validatorInsertCache          = make(map[string]insertCache)
	validatorUpdateCacheMut       sync.RWMutex
	validatorUpdateCache          = make(map[string]updateCache)
	validatorUpsertCacheMut       sync.RWMutex
	validatorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var validatorAfterSelectMu sync.Mutex
var validatorAfterSelectHooks []ValidatorHook

var validatorBeforeInsertMu sync.Mutex
var validatorBeforeInsertHooks []ValidatorHook
var validatorAfterInsertMu sync.Mutex
var validatorAfterInsertHooks []ValidatorHook

var validatorBeforeUpdateMu sync.Mutex
var validatorBeforeUpdateHooks []ValidatorHook
var validatorAfterUpdateMu sync.Mutex
var validatorAfterUpdateHooks []ValidatorHook

var validatorBeforeDeleteMu sync.Mutex
var validatorBeforeDeleteHooks []ValidatorHook
var validatorAfterDeleteMu sync.Mutex
var validatorAfterDeleteHooks []ValidatorHook

var validatorBeforeUpsertMu sync.Mutex
var validatorBeforeUpsertHooks []ValidatorHook
var validatorAfterUpsertMu sync.Mutex
var validatorAfterUpsertHooks []ValidatorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Validator) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Validator) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Validator) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Validator) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Validator) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Validator) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Validator) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Validator) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Validator) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddValidatorHook registers your hook function for all future operations.
func AddValidatorHook(hookPoint boil.HookPoint, validatorHook ValidatorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		validatorAfterSelectMu.Lock()
		validatorAfterSelectHooks = append(validatorAfterSelectHooks, validatorHook)
		validatorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		validatorBeforeInsertMu.Lock()
		validatorBeforeInsertHooks = append(validatorBeforeInsertHooks, validatorHook)
		validatorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		validatorAfterInsertMu.Lock()
		validatorAfterInsertHooks = append(validatorAfterInsertHooks, validatorHook)
		validatorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		validatorBeforeUpdateMu.Lock()
		validatorBeforeUpdateHooks = append(validatorBeforeUpdateHooks, validatorHook)
		validatorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		validatorAfterUpdateMu.Lock()
		validatorAfterUpdateHooks = append(validatorAfterUpdateHooks, validatorHook)
		validatorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		validatorBeforeDeleteMu.Lock()
		validatorBeforeDeleteHooks = append(validatorBeforeDeleteHooks, validatorHook)
		validatorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		validatorAfterDeleteMu.Lock()
		validatorAfterDeleteHooks = append(validatorAfterDeleteHooks, validatorHook)
		validatorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		validatorBeforeUpsertMu.Lock()
		validatorBeforeUpsertHooks = append(validatorBeforeUpsertHooks, validatorHook)
		validatorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		validatorAfterUpsertMu.Lock()
		validatorAfterUpsertHooks = append(validatorAfterUpsertHooks, validatorHook)
		validatorAfterUpsertMu.Unlock()
	}
}

// One returns a single validator record from the query.
func (q validatorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Validator, error) {
	o := &Validator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for validators")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Validator records from the query.
func (q validatorQuery) All(ctx context.Context, exec boil.ContextExecutor) (ValidatorSlice, error) {
	var o []*Validator

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Validator slice")
	}

	if len(validatorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Validator records in the query.
func (q validatorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count validators rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q validatorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if validators exists")
	}

	return count > 0, nil
}

// PublicKeyValidatorEvents retrieves all the validator_event's ValidatorEvents with an executor via public_key column.
func (o *Validator) PublicKeyValidatorEvents(mods ...qm.QueryMod) validatorEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"validator_events\".\"public_key\"=?", o.PublicKey),
	)

	return ValidatorEvents(queryMods...)
}

// PublicKeyValidatorPerformances retrieves all the validator_performance's ValidatorPerformances with an executor via public_key column.
func (o *Validator) PublicKeyValidatorPerformances(mods ...qm.QueryMod) validatorPerformanceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"validator_performances\".\"public_key\"=?", o.PublicKey),
	)

	return ValidatorPerformances(queryMods...)
}

// LoadPublicKeyValidatorEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (validatorL) LoadPublicKeyValidatorEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidator interface{}, mods queries.Applicator) error {
	var slice []*Validator
	var object *Validator

	if singular {
		var ok bool
		object, ok = maybeValidator.(*Validator)
		if !ok {
			object = new(Validator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidator))
			}
		}
	} else {
		s, ok := maybeValidator.(*[]*Validator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidator))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorR{}
		}
		args[object.PublicKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorR{}
			}
			args[obj.PublicKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validator_events`),
		qm.WhereIn(`validator_events.public_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load validator_events")
	}

	var resultSlice []*ValidatorEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice validator_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on validator_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validator_events")
	}

	if len(validatorEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PublicKeyValidatorEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &validatorEventR{}
			}
			foreign.R.PublicKeyValidator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublicKey == foreign.PublicKey {
				local.R.PublicKeyValidatorEvents = append(local.R.PublicKeyValidatorEvents, foreign)
				if foreign.R == nil {
					foreign.R = &validatorEventR{}
				}
				foreign.R.PublicKeyValidator = local
				break
			}
		}
	}

	return nil
}

// LoadPublicKeyValidatorPerformances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (validatorL) LoadPublicKeyValidatorPerformances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidator interface{}, mods queries.Applicator) error {
	var slice []*Validator
	var object *Validator

	if singular {
		var ok bool
		object, ok = maybeValidator.(*Validator)
		if !ok {
			object = new(Validator)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidator))
			}
		}
	} else {
		s, ok := maybeValidator.(*[]*Validator)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidator)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidator))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorR{}
		}
		args[object.PublicKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorR{}
			}
			args[obj.PublicKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validator_performances`),
		qm.WhereIn(`validator_performances.public_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load validator_performances")
	}

	var resultSlice []*ValidatorPerformance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice validator_performances")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on validator_performances")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validator_performances")
	}

	if len(validatorPerformanceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PublicKeyValidatorPerformances = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &validatorPerformanceR{}
			}
			foreign.R.PublicKeyValidator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PublicKey == foreign.PublicKey {
				local.R.PublicKeyValidatorPerformances = append(local.R.PublicKeyValidatorPerformances, foreign)
				if foreign.R == nil {
					foreign.R = &validatorPerformanceR{}
				}
				foreign.R.PublicKeyValidator = local
				break
			}
		}
	}

	return nil
}

// AddPublicKeyValidatorEvents adds the given related objects to the existing relationships
// of the validator, optionally inserting them as new records.
// Appends related to o.R.PublicKeyValidatorEvents.
// Sets related.R.PublicKeyValidator appropriately.
func (o *Validator) AddPublicKeyValidatorEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ValidatorEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublicKey = o.PublicKey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"validator_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
				strmangle.WhereClause("\"", "\"", 2, validatorEventPrimaryKeyColumns),
			)
			values := []interface{}{o.PublicKey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublicKey = o.PublicKey
		}
	}

	if o.R == nil {
		o.R = &validatorR{
			PublicKeyValidatorEvents: related,
		}
	} else {
		o.R.PublicKeyValidatorEvents = append(o.R.PublicKeyValidatorEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &validatorEventR{
				PublicKeyValidator: o,
			}
		} else {
			rel.R.PublicKeyValidator = o
		}
	}
	return nil
}

// AddPublicKeyValidatorPerformances adds the given related objects to the existing relationships
// of the validator, optionally inserting them as new records.
// Appends related to o.R.PublicKeyValidatorPerformances.
// Sets related.R.PublicKeyValidator appropriately.
func (o *Validator) AddPublicKeyValidatorPerformances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ValidatorPerformance) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublicKey = o.PublicKey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"validator_performances\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
				strmangle.WhereClause("\"", "\"", 2, validatorPerformancePrimaryKeyColumns),
			)
			values := []interface{}{o.PublicKey, rel.Provider, rel.Day, rel.PublicKey}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublicKey = o.PublicKey
		}
	}

	if o.R == nil {
		o.R = &validatorR{
			PublicKeyValidatorPerformances: related,
		}
	} else {
		o.R.PublicKeyValidatorPerformances = append(o.R.PublicKeyValidatorPerformances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &validatorPerformanceR{
				PublicKeyValidator: o,
			}
		} else {
			rel.R.PublicKeyValidator = o
		}
	}
	return nil
}

// Validators retrieves all the records using an executor.
func Validators(mods ...qm.QueryMod) validatorQuery {
	mods = append(mods, qm.From("\"validators\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"validators\".*"})
	}

	return validatorQuery{q}
}

// FindValidator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindValidator(ctx context.Context, exec boil.ContextExecutor, publicKey string, selectCols ...string) (*Validator, error) {
	validatorObj := &Validator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"validators\" where \"public_key\"=$1", sel,
	)

	q := queries.Raw(query, publicKey)

	err := q.Bind(ctx, exec, validatorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from validators")
	}

	if err = validatorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return validatorObj, err
	}

	return validatorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Validator) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no validators provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	validatorInsertCacheMut.RLock()
	cache, cached := validatorInsertCache[key]
	validatorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			validatorAllColumns,
			validatorColumnsWithDefault,
			validatorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(validatorType, validatorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(validatorType, validatorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"validators\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"validators\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into validators")
	}

	if !cached {
		validatorInsertCacheMut.Lock()
		validatorInsertCache[key] = cache
		validatorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Validator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Validator) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	validatorUpdateCacheMut.RLock()
	cache, cached := validatorUpdateCache[key]
	validatorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			validatorAllColumns,
			validatorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update validators, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"validators\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, validatorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(validatorType, validatorMapping, append(wl, validatorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update validators row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for validators")
	}

	if !cached {
		validatorUpdateCacheMut.Lock()
		validatorUpdateCache[key] = cache
		validatorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q validatorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for validators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for validators")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ValidatorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"validators\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, validatorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in validator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all validator")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Validator) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no validators provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	validatorUpsertCacheMut.RLock()
	cache, cached := validatorUpsertCache[key]
	validatorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			validatorAllColumns,
			validatorColumnsWithDefault,
			validatorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			validatorAllColumns,
			validatorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert validators, could not build update column list")
		}

		ret := strmangle.SetComplement(validatorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(validatorPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert validators, could not build conflict column list")
			}

			conflict = make([]string, len(validatorPrimaryKeyColumns))
			copy(conflict, validatorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"validators\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(validatorType, validatorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(validatorType, validatorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert validators")
	}

	if !cached {
		validatorUpsertCacheMut.Lock()
		validatorUpsertCache[key] = cache
		validatorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Validator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Validator) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Validator provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), validatorPrimaryKeyMapping)
	sql := "DELETE FROM \"validators\" WHERE \"public_key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from validators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for validators")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q validatorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no validatorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validators")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ValidatorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(validatorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"validators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validators")
	}

	if len(validatorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Validator) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindValidator(ctx, exec, o.PublicKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ValidatorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ValidatorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"validators\".* FROM \"validators\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ValidatorSlice")
	}

	*o = slice

	return nil
}

// ValidatorExists checks if the Validator row exists.
func ValidatorExists(ctx context.Context, exec boil.ContextExecutor, publicKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"validators\" where \"public_key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publicKey)
	}
	row := exec.QueryRowContext(ctx, sql, publicKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if validators exists")
	}

	return exists, nil
}

// Exists checks if the Validator row exists.
func (o *Validator) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ValidatorExists(ctx, exec, o.PublicKey)
}
