// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RewardRedirect is an object representing the database table.
type RewardRedirect struct {
	FromAddress string `boil:"from_address" json:"from_address" toml:"from_address" yaml:"from_address"`
	ToAddress   string `boil:"to_address" json:"to_address" toml:"to_address" yaml:"to_address"`

	R *rewardRedirectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rewardRedirectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RewardRedirectColumns = struct {
	FromAddress string
	ToAddress   string
}{
	FromAddress: "from_address",
	ToAddress:   "to_address",
}

var RewardRedirectTableColumns = struct {
	FromAddress string
	ToAddress   string
}{
	FromAddress: "reward_redirects.from_address",
	ToAddress:   "reward_redirects.to_address",
}

// Generated where

var RewardRedirectWhere = struct {
	FromAddress whereHelperstring
	ToAddress   whereHelperstring
}{
	FromAddress: whereHelperstring{field: "\"reward_redirects\".\"from_address\""},
	ToAddress:   whereHelperstring{field: "\"reward_redirects\".\"to_address\""},
}

// RewardRedirectRels is where relationship names are stored.
var RewardRedirectRels = struct {
}{}

// rewardRedirectR is where relationships are stored.
type rewardRedirectR struct {
}

// NewStruct creates a new relationship struct
func (*rewardRedirectR) NewStruct() *rewardRedirectR {
	return &rewardRedirectR{}
}

// rewardRedirectL is where Load methods for each relationship are stored.
type rewardRedirectL struct{}

var (
	rewardRedirectAllColumns            = []string{"from_address", "to_address"}
	rewardRedirectColumnsWithoutDefault = []string{"from_address", "to_address"}
	rewardRedirectColumnsWithDefault    = []string{}
	rewardRedirectPrimaryKeyColumns     = []string{"from_address"}
	rewardRedirectGeneratedColumns      = []string{}
)

type (
	// RewardRedirectSlice is an alias for a slice of pointers to RewardRedirect.
	// This should almost always be used instead of []RewardRedirect.
	RewardRedirectSlice []*RewardRedirect
	// RewardRedirectHook is the signature for custom RewardRedirect hook methods
	RewardRedirectHook func(context.Context, boil.ContextExecutor, *RewardRedirect) error

	rewardRedirectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rewardRedirectType                 = reflect.TypeOf(&RewardRedirect{})
	rewardRedirectMapping              = queries.MakeStructMapping(rewardRedirectType)
	rewardRedirectPrimaryKeyMapping, _ = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, rewardRedirectPrimaryKeyColumns)
	rewardRedirectInsertCacheMut       sync.RWMutex
	rewardRedirectInsertCache          = make(map[string]insertCache)
	rewardRedirectUpdateCacheMut       sync.RWMutex
	rewardRedirectUpdateCache          = make(map[string]updateCache)
	rewardRedirectUpsertCacheMut       sync.RWMutex
	rewardRedirectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rewardRedirectAfterSelectMu sync.Mutex
var rewardRedirectAfterSelectHooks []RewardRedirectHook

var rewardRedirectBeforeInsertMu sync.Mutex
var rewardRedirectBeforeInsertHooks []RewardRedirectHook
var rewardRedirectAfterInsertMu sync.Mutex
var rewardRedirectAfterInsertHooks []RewardRedirectHook

var rewardRedirectBeforeUpdateMu sync.Mutex
var rewardRedirectBeforeUpdateHooks []RewardRedirectHook
var rewardRedirectAfterUpdateMu sync.Mutex
var rewardRedirectAfterUpdateHooks []RewardRedirectHook

var rewardRedirectBeforeDeleteMu sync.Mutex
var rewardRedirectBeforeDeleteHooks []RewardRedirectHook
var rewardRedirectAfterDeleteMu sync.Mutex
var rewardRedirectAfterDeleteHooks []RewardRedirectHook

var rewardRedirectBeforeUpsertMu sync.Mutex
var rewardRedirectBeforeUpsertHooks []RewardRedirectHook
var rewardRedirectAfterUpsertMu sync.Mutex
var rewardRedirectAfterUpsertHooks []RewardRedirectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RewardRedirect) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RewardRedirect) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RewardRedirect) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RewardRedirect) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RewardRedirect) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RewardRedirect) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RewardRedirect) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RewardRedirect) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RewardRedirect) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rewardRedirectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRewardRedirectHook registers your hook function for all future operations.
func AddRewardRedirectHook(hookPoint boil.HookPoint, rewardRedirectHook RewardRedirectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rewardRedirectAfterSelectMu.Lock()
		rewardRedirectAfterSelectHooks = append(rewardRedirectAfterSelectHooks, rewardRedirectHook)
		rewardRedirectAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rewardRedirectBeforeInsertMu.Lock()
		rewardRedirectBeforeInsertHooks = append(rewardRedirectBeforeInsertHooks, rewardRedirectHook)
		rewardRedirectBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rewardRedirectAfterInsertMu.Lock()
		rewardRedirectAfterInsertHooks = append(rewardRedirectAfterInsertHooks, rewardRedirectHook)
		rewardRedirectAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rewardRedirectBeforeUpdateMu.Lock()
		rewardRedirectBeforeUpdateHooks = append(rewardRedirectBeforeUpdateHooks, rewardRedirectHook)
		rewardRedirectBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rewardRedirectAfterUpdateMu.Lock()
		rewardRedirectAfterUpdateHooks = append(rewardRedirectAfterUpdateHooks, rewardRedirectHook)
		rewardRedirectAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rewardRedirectBeforeDeleteMu.Lock()
		rewardRedirectBeforeDeleteHooks = append(rewardRedirectBeforeDeleteHooks, rewardRedirectHook)
		rewardRedirectBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rewardRedirectAfterDeleteMu.Lock()
		rewardRedirectAfterDeleteHooks = append(rewardRedirectAfterDeleteHooks, rewardRedirectHook)
		rewardRedirectAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rewardRedirectBeforeUpsertMu.Lock()
		rewardRedirectBeforeUpsertHooks = append(rewardRedirectBeforeUpsertHooks, rewardRedirectHook)
		rewardRedirectBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rewardRedirectAfterUpsertMu.Lock()
		rewardRedirectAfterUpsertHooks = append(rewardRedirectAfterUpsertHooks, rewardRedirectHook)
		rewardRedirectAfterUpsertMu.Unlock()
	}
}

// One returns a single rewardRedirect record from the query.
func (q rewardRedirectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RewardRedirect, error) {
	o := &RewardRedirect{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reward_redirects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RewardRedirect records from the query.
func (q rewardRedirectQuery) All(ctx context.Context, exec boil.ContextExecutor) (RewardRedirectSlice, error) {
	var o []*RewardRedirect

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RewardRedirect slice")
	}

	if len(rewardRedirectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RewardRedirect records in the query.
func (q rewardRedirectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reward_redirects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rewardRedirectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reward_redirects exists")
	}

	return count > 0, nil
}

// RewardRedirects retrieves all the records using an executor.
func RewardRedirects(mods ...qm.QueryMod) rewardRedirectQuery {
	mods = append(mods, qm.From("\"reward_redirects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reward_redirects\".*"})
	}

	return rewardRedirectQuery{q}
}

// FindRewardRedirect retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRewardRedirect(ctx context.Context, exec boil.ContextExecutor, fromAddress string, selectCols ...string) (*RewardRedirect, error) {
	rewardRedirectObj := &RewardRedirect{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reward_redirects\" where \"from_address\"=$1", sel,
	)

	q := queries.Raw(query, fromAddress)

	err := q.Bind(ctx, exec, rewardRedirectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reward_redirects")
	}

	if err = rewardRedirectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rewardRedirectObj, err
	}

	return rewardRedirectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RewardRedirect) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reward_redirects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rewardRedirectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rewardRedirectInsertCacheMut.RLock()
	cache, cached := rewardRedirectInsertCache[key]
	rewardRedirectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rewardRedirectAllColumns,
			rewardRedirectColumnsWithDefault,
			rewardRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reward_redirects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reward_redirects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reward_redirects")
	}

	if !cached {
		rewardRedirectInsertCacheMut.Lock()
		rewardRedirectInsertCache[key] = cache
		rewardRedirectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RewardRedirect.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RewardRedirect) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rewardRedirectUpdateCacheMut.RLock()
	cache, cached := rewardRedirectUpdateCache[key]
	rewardRedirectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rewardRedirectAllColumns,
			rewardRedirectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reward_redirects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reward_redirects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rewardRedirectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, append(wl, rewardRedirectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reward_redirects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reward_redirects")
	}

	if !cached {
		rewardRedirectUpdateCacheMut.Lock()
		rewardRedirectUpdateCache[key] = cache
		rewardRedirectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rewardRedirectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reward_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reward_redirects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RewardRedirectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reward_redirects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rewardRedirectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rewardRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rewardRedirect")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RewardRedirect) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reward_redirects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rewardRedirectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rewardRedirectUpsertCacheMut.RLock()
	cache, cached := rewardRedirectUpsertCache[key]
	rewardRedirectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rewardRedirectAllColumns,
			rewardRedirectColumnsWithDefault,
			rewardRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rewardRedirectAllColumns,
			rewardRedirectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reward_redirects, could not build update column list")
		}

		ret := strmangle.SetComplement(rewardRedirectAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rewardRedirectPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reward_redirects, could not build conflict column list")
			}

			conflict = make([]string, len(rewardRedirectPrimaryKeyColumns))
			copy(conflict, rewardRedirectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reward_redirects\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rewardRedirectType, rewardRedirectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reward_redirects")
	}

	if !cached {
		rewardRedirectUpsertCacheMut.Lock()
		rewardRedirectUpsertCache[key] = cache
		rewardRedirectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RewardRedirect record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RewardRedirect) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RewardRedirect provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rewardRedirectPrimaryKeyMapping)
	sql := "DELETE FROM \"reward_redirects\" WHERE \"from_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reward_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reward_redirects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rewardRedirectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rewardRedirectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reward_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reward_redirects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RewardRedirectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rewardRedirectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reward_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardRedirectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rewardRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reward_redirects")
	}

	if len(rewardRedirectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RewardRedirect) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRewardRedirect(ctx, exec, o.FromAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RewardRedirectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RewardRedirectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rewardRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reward_redirects\".* FROM \"reward_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rewardRedirectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RewardRedirectSlice")
	}

	*o = slice

	return nil
}

// RewardRedirectExists checks if the RewardRedirect row exists.
func RewardRedirectExists(ctx context.Context, exec boil.ContextExecutor, fromAddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reward_redirects\" where \"from_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fromAddress)
	}
	row := exec.QueryRowContext(ctx, sql, fromAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reward_redirects exists")
	}

	return exists, nil
}

// Exists checks if the RewardRedirect row exists.
func (o *RewardRedirect) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RewardRedirectExists(ctx, exec, o.FromAddress)
}
