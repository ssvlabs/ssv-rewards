// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OwnerRedirect is an object representing the database table.
type OwnerRedirect struct {
	FromAddress string `boil:"from_address" json:"from_address" toml:"from_address" yaml:"from_address"`
	ToAddress   string `boil:"to_address" json:"to_address" toml:"to_address" yaml:"to_address"`

	R *ownerRedirectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ownerRedirectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OwnerRedirectColumns = struct {
	FromAddress string
	ToAddress   string
}{
	FromAddress: "from_address",
	ToAddress:   "to_address",
}

var OwnerRedirectTableColumns = struct {
	FromAddress string
	ToAddress   string
}{
	FromAddress: "owner_redirects.from_address",
	ToAddress:   "owner_redirects.to_address",
}

// Generated where

var OwnerRedirectWhere = struct {
	FromAddress whereHelperstring
	ToAddress   whereHelperstring
}{
	FromAddress: whereHelperstring{field: "\"owner_redirects\".\"from_address\""},
	ToAddress:   whereHelperstring{field: "\"owner_redirects\".\"to_address\""},
}

// OwnerRedirectRels is where relationship names are stored.
var OwnerRedirectRels = struct {
}{}

// ownerRedirectR is where relationships are stored.
type ownerRedirectR struct {
}

// NewStruct creates a new relationship struct
func (*ownerRedirectR) NewStruct() *ownerRedirectR {
	return &ownerRedirectR{}
}

// ownerRedirectL is where Load methods for each relationship are stored.
type ownerRedirectL struct{}

var (
	ownerRedirectAllColumns            = []string{"from_address", "to_address"}
	ownerRedirectColumnsWithoutDefault = []string{"from_address", "to_address"}
	ownerRedirectColumnsWithDefault    = []string{}
	ownerRedirectPrimaryKeyColumns     = []string{"from_address"}
	ownerRedirectGeneratedColumns      = []string{}
)

type (
	// OwnerRedirectSlice is an alias for a slice of pointers to OwnerRedirect.
	// This should almost always be used instead of []OwnerRedirect.
	OwnerRedirectSlice []*OwnerRedirect
	// OwnerRedirectHook is the signature for custom OwnerRedirect hook methods
	OwnerRedirectHook func(context.Context, boil.ContextExecutor, *OwnerRedirect) error

	ownerRedirectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ownerRedirectType                 = reflect.TypeOf(&OwnerRedirect{})
	ownerRedirectMapping              = queries.MakeStructMapping(ownerRedirectType)
	ownerRedirectPrimaryKeyMapping, _ = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, ownerRedirectPrimaryKeyColumns)
	ownerRedirectInsertCacheMut       sync.RWMutex
	ownerRedirectInsertCache          = make(map[string]insertCache)
	ownerRedirectUpdateCacheMut       sync.RWMutex
	ownerRedirectUpdateCache          = make(map[string]updateCache)
	ownerRedirectUpsertCacheMut       sync.RWMutex
	ownerRedirectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ownerRedirectAfterSelectMu sync.Mutex
var ownerRedirectAfterSelectHooks []OwnerRedirectHook

var ownerRedirectBeforeInsertMu sync.Mutex
var ownerRedirectBeforeInsertHooks []OwnerRedirectHook
var ownerRedirectAfterInsertMu sync.Mutex
var ownerRedirectAfterInsertHooks []OwnerRedirectHook

var ownerRedirectBeforeUpdateMu sync.Mutex
var ownerRedirectBeforeUpdateHooks []OwnerRedirectHook
var ownerRedirectAfterUpdateMu sync.Mutex
var ownerRedirectAfterUpdateHooks []OwnerRedirectHook

var ownerRedirectBeforeDeleteMu sync.Mutex
var ownerRedirectBeforeDeleteHooks []OwnerRedirectHook
var ownerRedirectAfterDeleteMu sync.Mutex
var ownerRedirectAfterDeleteHooks []OwnerRedirectHook

var ownerRedirectBeforeUpsertMu sync.Mutex
var ownerRedirectBeforeUpsertHooks []OwnerRedirectHook
var ownerRedirectAfterUpsertMu sync.Mutex
var ownerRedirectAfterUpsertHooks []OwnerRedirectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OwnerRedirect) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OwnerRedirect) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OwnerRedirect) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OwnerRedirect) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OwnerRedirect) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OwnerRedirect) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OwnerRedirect) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OwnerRedirect) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OwnerRedirect) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range ownerRedirectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOwnerRedirectHook registers your hook function for all future operations.
func AddOwnerRedirectHook(hookPoint boil.HookPoint, ownerRedirectHook OwnerRedirectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ownerRedirectAfterSelectMu.Lock()
		ownerRedirectAfterSelectHooks = append(ownerRedirectAfterSelectHooks, ownerRedirectHook)
		ownerRedirectAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		ownerRedirectBeforeInsertMu.Lock()
		ownerRedirectBeforeInsertHooks = append(ownerRedirectBeforeInsertHooks, ownerRedirectHook)
		ownerRedirectBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		ownerRedirectAfterInsertMu.Lock()
		ownerRedirectAfterInsertHooks = append(ownerRedirectAfterInsertHooks, ownerRedirectHook)
		ownerRedirectAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		ownerRedirectBeforeUpdateMu.Lock()
		ownerRedirectBeforeUpdateHooks = append(ownerRedirectBeforeUpdateHooks, ownerRedirectHook)
		ownerRedirectBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		ownerRedirectAfterUpdateMu.Lock()
		ownerRedirectAfterUpdateHooks = append(ownerRedirectAfterUpdateHooks, ownerRedirectHook)
		ownerRedirectAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		ownerRedirectBeforeDeleteMu.Lock()
		ownerRedirectBeforeDeleteHooks = append(ownerRedirectBeforeDeleteHooks, ownerRedirectHook)
		ownerRedirectBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		ownerRedirectAfterDeleteMu.Lock()
		ownerRedirectAfterDeleteHooks = append(ownerRedirectAfterDeleteHooks, ownerRedirectHook)
		ownerRedirectAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		ownerRedirectBeforeUpsertMu.Lock()
		ownerRedirectBeforeUpsertHooks = append(ownerRedirectBeforeUpsertHooks, ownerRedirectHook)
		ownerRedirectBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		ownerRedirectAfterUpsertMu.Lock()
		ownerRedirectAfterUpsertHooks = append(ownerRedirectAfterUpsertHooks, ownerRedirectHook)
		ownerRedirectAfterUpsertMu.Unlock()
	}
}

// One returns a single ownerRedirect record from the query.
func (q ownerRedirectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OwnerRedirect, error) {
	o := &OwnerRedirect{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for owner_redirects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OwnerRedirect records from the query.
func (q ownerRedirectQuery) All(ctx context.Context, exec boil.ContextExecutor) (OwnerRedirectSlice, error) {
	var o []*OwnerRedirect

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OwnerRedirect slice")
	}

	if len(ownerRedirectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OwnerRedirect records in the query.
func (q ownerRedirectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count owner_redirects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ownerRedirectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if owner_redirects exists")
	}

	return count > 0, nil
}

// OwnerRedirects retrieves all the records using an executor.
func OwnerRedirects(mods ...qm.QueryMod) ownerRedirectQuery {
	mods = append(mods, qm.From("\"owner_redirects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"owner_redirects\".*"})
	}

	return ownerRedirectQuery{q}
}

// FindOwnerRedirect retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOwnerRedirect(ctx context.Context, exec boil.ContextExecutor, fromAddress string, selectCols ...string) (*OwnerRedirect, error) {
	ownerRedirectObj := &OwnerRedirect{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"owner_redirects\" where \"from_address\"=$1", sel,
	)

	q := queries.Raw(query, fromAddress)

	err := q.Bind(ctx, exec, ownerRedirectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from owner_redirects")
	}

	if err = ownerRedirectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return ownerRedirectObj, err
	}

	return ownerRedirectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OwnerRedirect) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no owner_redirects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ownerRedirectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ownerRedirectInsertCacheMut.RLock()
	cache, cached := ownerRedirectInsertCache[key]
	ownerRedirectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ownerRedirectAllColumns,
			ownerRedirectColumnsWithDefault,
			ownerRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"owner_redirects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"owner_redirects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into owner_redirects")
	}

	if !cached {
		ownerRedirectInsertCacheMut.Lock()
		ownerRedirectInsertCache[key] = cache
		ownerRedirectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OwnerRedirect.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OwnerRedirect) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ownerRedirectUpdateCacheMut.RLock()
	cache, cached := ownerRedirectUpdateCache[key]
	ownerRedirectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ownerRedirectAllColumns,
			ownerRedirectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update owner_redirects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"owner_redirects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ownerRedirectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, append(wl, ownerRedirectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update owner_redirects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for owner_redirects")
	}

	if !cached {
		ownerRedirectUpdateCacheMut.Lock()
		ownerRedirectUpdateCache[key] = cache
		ownerRedirectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ownerRedirectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for owner_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for owner_redirects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OwnerRedirectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"owner_redirects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ownerRedirectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ownerRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ownerRedirect")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OwnerRedirect) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no owner_redirects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ownerRedirectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ownerRedirectUpsertCacheMut.RLock()
	cache, cached := ownerRedirectUpsertCache[key]
	ownerRedirectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			ownerRedirectAllColumns,
			ownerRedirectColumnsWithDefault,
			ownerRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ownerRedirectAllColumns,
			ownerRedirectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert owner_redirects, could not build update column list")
		}

		ret := strmangle.SetComplement(ownerRedirectAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(ownerRedirectPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert owner_redirects, could not build conflict column list")
			}

			conflict = make([]string, len(ownerRedirectPrimaryKeyColumns))
			copy(conflict, ownerRedirectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"owner_redirects\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ownerRedirectType, ownerRedirectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert owner_redirects")
	}

	if !cached {
		ownerRedirectUpsertCacheMut.Lock()
		ownerRedirectUpsertCache[key] = cache
		ownerRedirectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OwnerRedirect record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OwnerRedirect) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OwnerRedirect provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ownerRedirectPrimaryKeyMapping)
	sql := "DELETE FROM \"owner_redirects\" WHERE \"from_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from owner_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for owner_redirects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ownerRedirectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no ownerRedirectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from owner_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for owner_redirects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OwnerRedirectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ownerRedirectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"owner_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ownerRedirectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ownerRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for owner_redirects")
	}

	if len(ownerRedirectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OwnerRedirect) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOwnerRedirect(ctx, exec, o.FromAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OwnerRedirectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OwnerRedirectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ownerRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"owner_redirects\".* FROM \"owner_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ownerRedirectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OwnerRedirectSlice")
	}

	*o = slice

	return nil
}

// OwnerRedirectExists checks if the OwnerRedirect row exists.
func OwnerRedirectExists(ctx context.Context, exec boil.ContextExecutor, fromAddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"owner_redirects\" where \"from_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fromAddress)
	}
	row := exec.QueryRowContext(ctx, sql, fromAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if owner_redirects exists")
	}

	return exists, nil
}

// Exists checks if the OwnerRedirect row exists.
func (o *OwnerRedirect) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OwnerRedirectExists(ctx, exec, o.FromAddress)
}
