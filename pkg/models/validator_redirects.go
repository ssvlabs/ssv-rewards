// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ValidatorRedirect is an object representing the database table.
type ValidatorRedirect struct {
	PublicKey string `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	ToAddress string `boil:"to_address" json:"to_address" toml:"to_address" yaml:"to_address"`

	R *validatorRedirectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L validatorRedirectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ValidatorRedirectColumns = struct {
	PublicKey string
	ToAddress string
}{
	PublicKey: "public_key",
	ToAddress: "to_address",
}

var ValidatorRedirectTableColumns = struct {
	PublicKey string
	ToAddress string
}{
	PublicKey: "validator_redirects.public_key",
	ToAddress: "validator_redirects.to_address",
}

// Generated where

var ValidatorRedirectWhere = struct {
	PublicKey whereHelperstring
	ToAddress whereHelperstring
}{
	PublicKey: whereHelperstring{field: "\"validator_redirects\".\"public_key\""},
	ToAddress: whereHelperstring{field: "\"validator_redirects\".\"to_address\""},
}

// ValidatorRedirectRels is where relationship names are stored.
var ValidatorRedirectRels = struct {
	PublicKeyValidator string
}{
	PublicKeyValidator: "PublicKeyValidator",
}

// validatorRedirectR is where relationships are stored.
type validatorRedirectR struct {
	PublicKeyValidator *Validator `boil:"PublicKeyValidator" json:"PublicKeyValidator" toml:"PublicKeyValidator" yaml:"PublicKeyValidator"`
}

// NewStruct creates a new relationship struct
func (*validatorRedirectR) NewStruct() *validatorRedirectR {
	return &validatorRedirectR{}
}

func (r *validatorRedirectR) GetPublicKeyValidator() *Validator {
	if r == nil {
		return nil
	}
	return r.PublicKeyValidator
}

// validatorRedirectL is where Load methods for each relationship are stored.
type validatorRedirectL struct{}

var (
	validatorRedirectAllColumns            = []string{"public_key", "to_address"}
	validatorRedirectColumnsWithoutDefault = []string{"public_key", "to_address"}
	validatorRedirectColumnsWithDefault    = []string{}
	validatorRedirectPrimaryKeyColumns     = []string{"public_key"}
	validatorRedirectGeneratedColumns      = []string{}
)

type (
	// ValidatorRedirectSlice is an alias for a slice of pointers to ValidatorRedirect.
	// This should almost always be used instead of []ValidatorRedirect.
	ValidatorRedirectSlice []*ValidatorRedirect
	// ValidatorRedirectHook is the signature for custom ValidatorRedirect hook methods
	ValidatorRedirectHook func(context.Context, boil.ContextExecutor, *ValidatorRedirect) error

	validatorRedirectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	validatorRedirectType                 = reflect.TypeOf(&ValidatorRedirect{})
	validatorRedirectMapping              = queries.MakeStructMapping(validatorRedirectType)
	validatorRedirectPrimaryKeyMapping, _ = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, validatorRedirectPrimaryKeyColumns)
	validatorRedirectInsertCacheMut       sync.RWMutex
	validatorRedirectInsertCache          = make(map[string]insertCache)
	validatorRedirectUpdateCacheMut       sync.RWMutex
	validatorRedirectUpdateCache          = make(map[string]updateCache)
	validatorRedirectUpsertCacheMut       sync.RWMutex
	validatorRedirectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var validatorRedirectAfterSelectMu sync.Mutex
var validatorRedirectAfterSelectHooks []ValidatorRedirectHook

var validatorRedirectBeforeInsertMu sync.Mutex
var validatorRedirectBeforeInsertHooks []ValidatorRedirectHook
var validatorRedirectAfterInsertMu sync.Mutex
var validatorRedirectAfterInsertHooks []ValidatorRedirectHook

var validatorRedirectBeforeUpdateMu sync.Mutex
var validatorRedirectBeforeUpdateHooks []ValidatorRedirectHook
var validatorRedirectAfterUpdateMu sync.Mutex
var validatorRedirectAfterUpdateHooks []ValidatorRedirectHook

var validatorRedirectBeforeDeleteMu sync.Mutex
var validatorRedirectBeforeDeleteHooks []ValidatorRedirectHook
var validatorRedirectAfterDeleteMu sync.Mutex
var validatorRedirectAfterDeleteHooks []ValidatorRedirectHook

var validatorRedirectBeforeUpsertMu sync.Mutex
var validatorRedirectBeforeUpsertHooks []ValidatorRedirectHook
var validatorRedirectAfterUpsertMu sync.Mutex
var validatorRedirectAfterUpsertHooks []ValidatorRedirectHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ValidatorRedirect) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ValidatorRedirect) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ValidatorRedirect) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ValidatorRedirect) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ValidatorRedirect) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ValidatorRedirect) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ValidatorRedirect) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ValidatorRedirect) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ValidatorRedirect) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorRedirectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddValidatorRedirectHook registers your hook function for all future operations.
func AddValidatorRedirectHook(hookPoint boil.HookPoint, validatorRedirectHook ValidatorRedirectHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		validatorRedirectAfterSelectMu.Lock()
		validatorRedirectAfterSelectHooks = append(validatorRedirectAfterSelectHooks, validatorRedirectHook)
		validatorRedirectAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		validatorRedirectBeforeInsertMu.Lock()
		validatorRedirectBeforeInsertHooks = append(validatorRedirectBeforeInsertHooks, validatorRedirectHook)
		validatorRedirectBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		validatorRedirectAfterInsertMu.Lock()
		validatorRedirectAfterInsertHooks = append(validatorRedirectAfterInsertHooks, validatorRedirectHook)
		validatorRedirectAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		validatorRedirectBeforeUpdateMu.Lock()
		validatorRedirectBeforeUpdateHooks = append(validatorRedirectBeforeUpdateHooks, validatorRedirectHook)
		validatorRedirectBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		validatorRedirectAfterUpdateMu.Lock()
		validatorRedirectAfterUpdateHooks = append(validatorRedirectAfterUpdateHooks, validatorRedirectHook)
		validatorRedirectAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		validatorRedirectBeforeDeleteMu.Lock()
		validatorRedirectBeforeDeleteHooks = append(validatorRedirectBeforeDeleteHooks, validatorRedirectHook)
		validatorRedirectBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		validatorRedirectAfterDeleteMu.Lock()
		validatorRedirectAfterDeleteHooks = append(validatorRedirectAfterDeleteHooks, validatorRedirectHook)
		validatorRedirectAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		validatorRedirectBeforeUpsertMu.Lock()
		validatorRedirectBeforeUpsertHooks = append(validatorRedirectBeforeUpsertHooks, validatorRedirectHook)
		validatorRedirectBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		validatorRedirectAfterUpsertMu.Lock()
		validatorRedirectAfterUpsertHooks = append(validatorRedirectAfterUpsertHooks, validatorRedirectHook)
		validatorRedirectAfterUpsertMu.Unlock()
	}
}

// One returns a single validatorRedirect record from the query.
func (q validatorRedirectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ValidatorRedirect, error) {
	o := &ValidatorRedirect{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for validator_redirects")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ValidatorRedirect records from the query.
func (q validatorRedirectQuery) All(ctx context.Context, exec boil.ContextExecutor) (ValidatorRedirectSlice, error) {
	var o []*ValidatorRedirect

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ValidatorRedirect slice")
	}

	if len(validatorRedirectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ValidatorRedirect records in the query.
func (q validatorRedirectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count validator_redirects rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q validatorRedirectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if validator_redirects exists")
	}

	return count > 0, nil
}

// PublicKeyValidator pointed to by the foreign key.
func (o *ValidatorRedirect) PublicKeyValidator(mods ...qm.QueryMod) validatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"public_key\" = ?", o.PublicKey),
	}

	queryMods = append(queryMods, mods...)

	return Validators(queryMods...)
}

// LoadPublicKeyValidator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (validatorRedirectL) LoadPublicKeyValidator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidatorRedirect interface{}, mods queries.Applicator) error {
	var slice []*ValidatorRedirect
	var object *ValidatorRedirect

	if singular {
		var ok bool
		object, ok = maybeValidatorRedirect.(*ValidatorRedirect)
		if !ok {
			object = new(ValidatorRedirect)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidatorRedirect)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidatorRedirect))
			}
		}
	} else {
		s, ok := maybeValidatorRedirect.(*[]*ValidatorRedirect)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidatorRedirect)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidatorRedirect))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorRedirectR{}
		}
		args[object.PublicKey] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorRedirectR{}
			}

			args[obj.PublicKey] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validators`),
		qm.WhereIn(`validators.public_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Validator")
	}

	var resultSlice []*Validator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Validator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for validators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validators")
	}

	if len(validatorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PublicKeyValidator = foreign
		if foreign.R == nil {
			foreign.R = &validatorR{}
		}
		foreign.R.PublicKeyValidatorRedirect = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublicKey == foreign.PublicKey {
				local.R.PublicKeyValidator = foreign
				if foreign.R == nil {
					foreign.R = &validatorR{}
				}
				foreign.R.PublicKeyValidatorRedirect = local
				break
			}
		}
	}

	return nil
}

// SetPublicKeyValidator of the validatorRedirect to the related item.
// Sets o.R.PublicKeyValidator to related.
// Adds o to related.R.PublicKeyValidatorRedirect.
func (o *ValidatorRedirect) SetPublicKeyValidator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Validator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"validator_redirects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
		strmangle.WhereClause("\"", "\"", 2, validatorRedirectPrimaryKeyColumns),
	)
	values := []interface{}{related.PublicKey, o.PublicKey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublicKey = related.PublicKey
	if o.R == nil {
		o.R = &validatorRedirectR{
			PublicKeyValidator: related,
		}
	} else {
		o.R.PublicKeyValidator = related
	}

	if related.R == nil {
		related.R = &validatorR{
			PublicKeyValidatorRedirect: o,
		}
	} else {
		related.R.PublicKeyValidatorRedirect = o
	}

	return nil
}

// ValidatorRedirects retrieves all the records using an executor.
func ValidatorRedirects(mods ...qm.QueryMod) validatorRedirectQuery {
	mods = append(mods, qm.From("\"validator_redirects\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"validator_redirects\".*"})
	}

	return validatorRedirectQuery{q}
}

// FindValidatorRedirect retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindValidatorRedirect(ctx context.Context, exec boil.ContextExecutor, publicKey string, selectCols ...string) (*ValidatorRedirect, error) {
	validatorRedirectObj := &ValidatorRedirect{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"validator_redirects\" where \"public_key\"=$1", sel,
	)

	q := queries.Raw(query, publicKey)

	err := q.Bind(ctx, exec, validatorRedirectObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from validator_redirects")
	}

	if err = validatorRedirectObj.doAfterSelectHooks(ctx, exec); err != nil {
		return validatorRedirectObj, err
	}

	return validatorRedirectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ValidatorRedirect) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no validator_redirects provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorRedirectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	validatorRedirectInsertCacheMut.RLock()
	cache, cached := validatorRedirectInsertCache[key]
	validatorRedirectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			validatorRedirectAllColumns,
			validatorRedirectColumnsWithDefault,
			validatorRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"validator_redirects\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"validator_redirects\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into validator_redirects")
	}

	if !cached {
		validatorRedirectInsertCacheMut.Lock()
		validatorRedirectInsertCache[key] = cache
		validatorRedirectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ValidatorRedirect.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ValidatorRedirect) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	validatorRedirectUpdateCacheMut.RLock()
	cache, cached := validatorRedirectUpdateCache[key]
	validatorRedirectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			validatorRedirectAllColumns,
			validatorRedirectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update validator_redirects, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"validator_redirects\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, validatorRedirectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, append(wl, validatorRedirectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update validator_redirects row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for validator_redirects")
	}

	if !cached {
		validatorRedirectUpdateCacheMut.Lock()
		validatorRedirectUpdateCache[key] = cache
		validatorRedirectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q validatorRedirectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for validator_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for validator_redirects")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ValidatorRedirectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"validator_redirects\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, validatorRedirectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in validatorRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all validatorRedirect")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ValidatorRedirect) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no validator_redirects provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorRedirectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	validatorRedirectUpsertCacheMut.RLock()
	cache, cached := validatorRedirectUpsertCache[key]
	validatorRedirectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			validatorRedirectAllColumns,
			validatorRedirectColumnsWithDefault,
			validatorRedirectColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			validatorRedirectAllColumns,
			validatorRedirectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert validator_redirects, could not build update column list")
		}

		ret := strmangle.SetComplement(validatorRedirectAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(validatorRedirectPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert validator_redirects, could not build conflict column list")
			}

			conflict = make([]string, len(validatorRedirectPrimaryKeyColumns))
			copy(conflict, validatorRedirectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"validator_redirects\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(validatorRedirectType, validatorRedirectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert validator_redirects")
	}

	if !cached {
		validatorRedirectUpsertCacheMut.Lock()
		validatorRedirectUpsertCache[key] = cache
		validatorRedirectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ValidatorRedirect record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ValidatorRedirect) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ValidatorRedirect provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), validatorRedirectPrimaryKeyMapping)
	sql := "DELETE FROM \"validator_redirects\" WHERE \"public_key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from validator_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for validator_redirects")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q validatorRedirectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no validatorRedirectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validator_redirects")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_redirects")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ValidatorRedirectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(validatorRedirectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"validator_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorRedirectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validatorRedirect slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_redirects")
	}

	if len(validatorRedirectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ValidatorRedirect) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindValidatorRedirect(ctx, exec, o.PublicKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ValidatorRedirectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ValidatorRedirectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorRedirectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"validator_redirects\".* FROM \"validator_redirects\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorRedirectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ValidatorRedirectSlice")
	}

	*o = slice

	return nil
}

// ValidatorRedirectExists checks if the ValidatorRedirect row exists.
func ValidatorRedirectExists(ctx context.Context, exec boil.ContextExecutor, publicKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"validator_redirects\" where \"public_key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, publicKey)
	}
	row := exec.QueryRowContext(ctx, sql, publicKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if validator_redirects exists")
	}

	return exists, nil
}

// Exists checks if the ValidatorRedirect row exists.
func (o *ValidatorRedirect) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ValidatorRedirectExists(ctx, exec, o.PublicKey)
}
