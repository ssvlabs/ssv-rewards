// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ContractEvent is an object representing the database table.
type ContractEvent struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventName        string      `boil:"event_name" json:"event_name" toml:"event_name" yaml:"event_name"`
	Slot             int         `boil:"slot" json:"slot" toml:"slot" yaml:"slot"`
	BlockNumber      int         `boil:"block_number" json:"block_number" toml:"block_number" yaml:"block_number"`
	BlockHash        string      `boil:"block_hash" json:"block_hash" toml:"block_hash" yaml:"block_hash"`
	BlockTime        time.Time   `boil:"block_time" json:"block_time" toml:"block_time" yaml:"block_time"`
	TransactionHash  string      `boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	TransactionIndex int         `boil:"transaction_index" json:"transaction_index" toml:"transaction_index" yaml:"transaction_index"`
	LogIndex         int         `boil:"log_index" json:"log_index" toml:"log_index" yaml:"log_index"`
	RawLog           types.JSON  `boil:"raw_log" json:"raw_log" toml:"raw_log" yaml:"raw_log"`
	RawEvent         types.JSON  `boil:"raw_event" json:"raw_event" toml:"raw_event" yaml:"raw_event"`
	Error            null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *contractEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contractEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContractEventColumns = struct {
	ID               string
	EventName        string
	Slot             string
	BlockNumber      string
	BlockHash        string
	BlockTime        string
	TransactionHash  string
	TransactionIndex string
	LogIndex         string
	RawLog           string
	RawEvent         string
	Error            string
}{
	ID:               "id",
	EventName:        "event_name",
	Slot:             "slot",
	BlockNumber:      "block_number",
	BlockHash:        "block_hash",
	BlockTime:        "block_time",
	TransactionHash:  "transaction_hash",
	TransactionIndex: "transaction_index",
	LogIndex:         "log_index",
	RawLog:           "raw_log",
	RawEvent:         "raw_event",
	Error:            "error",
}

var ContractEventTableColumns = struct {
	ID               string
	EventName        string
	Slot             string
	BlockNumber      string
	BlockHash        string
	BlockTime        string
	TransactionHash  string
	TransactionIndex string
	LogIndex         string
	RawLog           string
	RawEvent         string
	Error            string
}{
	ID:               "contract_events.id",
	EventName:        "contract_events.event_name",
	Slot:             "contract_events.slot",
	BlockNumber:      "contract_events.block_number",
	BlockHash:        "contract_events.block_hash",
	BlockTime:        "contract_events.block_time",
	TransactionHash:  "contract_events.transaction_hash",
	TransactionIndex: "contract_events.transaction_index",
	LogIndex:         "contract_events.log_index",
	RawLog:           "contract_events.raw_log",
	RawEvent:         "contract_events.raw_event",
	Error:            "contract_events.error",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ContractEventWhere = struct {
	ID               whereHelperint
	EventName        whereHelperstring
	Slot             whereHelperint
	BlockNumber      whereHelperint
	BlockHash        whereHelperstring
	BlockTime        whereHelpertime_Time
	TransactionHash  whereHelperstring
	TransactionIndex whereHelperint
	LogIndex         whereHelperint
	RawLog           whereHelpertypes_JSON
	RawEvent         whereHelpertypes_JSON
	Error            whereHelpernull_String
}{
	ID:               whereHelperint{field: "\"contract_events\".\"id\""},
	EventName:        whereHelperstring{field: "\"contract_events\".\"event_name\""},
	Slot:             whereHelperint{field: "\"contract_events\".\"slot\""},
	BlockNumber:      whereHelperint{field: "\"contract_events\".\"block_number\""},
	BlockHash:        whereHelperstring{field: "\"contract_events\".\"block_hash\""},
	BlockTime:        whereHelpertime_Time{field: "\"contract_events\".\"block_time\""},
	TransactionHash:  whereHelperstring{field: "\"contract_events\".\"transaction_hash\""},
	TransactionIndex: whereHelperint{field: "\"contract_events\".\"transaction_index\""},
	LogIndex:         whereHelperint{field: "\"contract_events\".\"log_index\""},
	RawLog:           whereHelpertypes_JSON{field: "\"contract_events\".\"raw_log\""},
	RawEvent:         whereHelpertypes_JSON{field: "\"contract_events\".\"raw_event\""},
	Error:            whereHelpernull_String{field: "\"contract_events\".\"error\""},
}

// ContractEventRels is where relationship names are stored.
var ContractEventRels = struct {
	ValidatorEvents string
}{
	ValidatorEvents: "ValidatorEvents",
}

// contractEventR is where relationships are stored.
type contractEventR struct {
	ValidatorEvents ValidatorEventSlice `boil:"ValidatorEvents" json:"ValidatorEvents" toml:"ValidatorEvents" yaml:"ValidatorEvents"`
}

// NewStruct creates a new relationship struct
func (*contractEventR) NewStruct() *contractEventR {
	return &contractEventR{}
}

func (r *contractEventR) GetValidatorEvents() ValidatorEventSlice {
	if r == nil {
		return nil
	}
	return r.ValidatorEvents
}

// contractEventL is where Load methods for each relationship are stored.
type contractEventL struct{}

var (
	contractEventAllColumns            = []string{"id", "event_name", "slot", "block_number", "block_hash", "block_time", "transaction_hash", "transaction_index", "log_index", "raw_log", "raw_event", "error"}
	contractEventColumnsWithoutDefault = []string{"event_name", "slot", "block_number", "block_hash", "block_time", "transaction_hash", "transaction_index", "log_index", "raw_log", "raw_event"}
	contractEventColumnsWithDefault    = []string{"id", "error"}
	contractEventPrimaryKeyColumns     = []string{"id"}
	contractEventGeneratedColumns      = []string{}
)

type (
	// ContractEventSlice is an alias for a slice of pointers to ContractEvent.
	// This should almost always be used instead of []ContractEvent.
	ContractEventSlice []*ContractEvent
	// ContractEventHook is the signature for custom ContractEvent hook methods
	ContractEventHook func(context.Context, boil.ContextExecutor, *ContractEvent) error

	contractEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contractEventType                 = reflect.TypeOf(&ContractEvent{})
	contractEventMapping              = queries.MakeStructMapping(contractEventType)
	contractEventPrimaryKeyMapping, _ = queries.BindMapping(contractEventType, contractEventMapping, contractEventPrimaryKeyColumns)
	contractEventInsertCacheMut       sync.RWMutex
	contractEventInsertCache          = make(map[string]insertCache)
	contractEventUpdateCacheMut       sync.RWMutex
	contractEventUpdateCache          = make(map[string]updateCache)
	contractEventUpsertCacheMut       sync.RWMutex
	contractEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contractEventAfterSelectMu sync.Mutex
var contractEventAfterSelectHooks []ContractEventHook

var contractEventBeforeInsertMu sync.Mutex
var contractEventBeforeInsertHooks []ContractEventHook
var contractEventAfterInsertMu sync.Mutex
var contractEventAfterInsertHooks []ContractEventHook

var contractEventBeforeUpdateMu sync.Mutex
var contractEventBeforeUpdateHooks []ContractEventHook
var contractEventAfterUpdateMu sync.Mutex
var contractEventAfterUpdateHooks []ContractEventHook

var contractEventBeforeDeleteMu sync.Mutex
var contractEventBeforeDeleteHooks []ContractEventHook
var contractEventAfterDeleteMu sync.Mutex
var contractEventAfterDeleteHooks []ContractEventHook

var contractEventBeforeUpsertMu sync.Mutex
var contractEventBeforeUpsertHooks []ContractEventHook
var contractEventAfterUpsertMu sync.Mutex
var contractEventAfterUpsertHooks []ContractEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContractEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContractEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContractEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContractEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContractEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContractEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContractEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContractEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContractEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contractEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContractEventHook registers your hook function for all future operations.
func AddContractEventHook(hookPoint boil.HookPoint, contractEventHook ContractEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contractEventAfterSelectMu.Lock()
		contractEventAfterSelectHooks = append(contractEventAfterSelectHooks, contractEventHook)
		contractEventAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contractEventBeforeInsertMu.Lock()
		contractEventBeforeInsertHooks = append(contractEventBeforeInsertHooks, contractEventHook)
		contractEventBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contractEventAfterInsertMu.Lock()
		contractEventAfterInsertHooks = append(contractEventAfterInsertHooks, contractEventHook)
		contractEventAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contractEventBeforeUpdateMu.Lock()
		contractEventBeforeUpdateHooks = append(contractEventBeforeUpdateHooks, contractEventHook)
		contractEventBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contractEventAfterUpdateMu.Lock()
		contractEventAfterUpdateHooks = append(contractEventAfterUpdateHooks, contractEventHook)
		contractEventAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contractEventBeforeDeleteMu.Lock()
		contractEventBeforeDeleteHooks = append(contractEventBeforeDeleteHooks, contractEventHook)
		contractEventBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contractEventAfterDeleteMu.Lock()
		contractEventAfterDeleteHooks = append(contractEventAfterDeleteHooks, contractEventHook)
		contractEventAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contractEventBeforeUpsertMu.Lock()
		contractEventBeforeUpsertHooks = append(contractEventBeforeUpsertHooks, contractEventHook)
		contractEventBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contractEventAfterUpsertMu.Lock()
		contractEventAfterUpsertHooks = append(contractEventAfterUpsertHooks, contractEventHook)
		contractEventAfterUpsertMu.Unlock()
	}
}

// One returns a single contractEvent record from the query.
func (q contractEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContractEvent, error) {
	o := &ContractEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contract_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ContractEvent records from the query.
func (q contractEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContractEventSlice, error) {
	var o []*ContractEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContractEvent slice")
	}

	if len(contractEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ContractEvent records in the query.
func (q contractEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contract_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contractEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contract_events exists")
	}

	return count > 0, nil
}

// ValidatorEvents retrieves all the validator_event's ValidatorEvents with an executor.
func (o *ContractEvent) ValidatorEvents(mods ...qm.QueryMod) validatorEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"validator_events\".\"contract_event_id\"=?", o.ID),
	)

	return ValidatorEvents(queryMods...)
}

// LoadValidatorEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contractEventL) LoadValidatorEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContractEvent interface{}, mods queries.Applicator) error {
	var slice []*ContractEvent
	var object *ContractEvent

	if singular {
		var ok bool
		object, ok = maybeContractEvent.(*ContractEvent)
		if !ok {
			object = new(ContractEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContractEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContractEvent))
			}
		}
	} else {
		s, ok := maybeContractEvent.(*[]*ContractEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContractEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContractEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contractEventR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contractEventR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validator_events`),
		qm.WhereIn(`validator_events.contract_event_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load validator_events")
	}

	var resultSlice []*ValidatorEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice validator_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on validator_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validator_events")
	}

	if len(validatorEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ValidatorEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &validatorEventR{}
			}
			foreign.R.ContractEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContractEventID {
				local.R.ValidatorEvents = append(local.R.ValidatorEvents, foreign)
				if foreign.R == nil {
					foreign.R = &validatorEventR{}
				}
				foreign.R.ContractEvent = local
				break
			}
		}
	}

	return nil
}

// AddValidatorEvents adds the given related objects to the existing relationships
// of the contract_event, optionally inserting them as new records.
// Appends related to o.R.ValidatorEvents.
// Sets related.R.ContractEvent appropriately.
func (o *ContractEvent) AddValidatorEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ValidatorEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContractEventID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"validator_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"contract_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, validatorEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContractEventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contractEventR{
			ValidatorEvents: related,
		}
	} else {
		o.R.ValidatorEvents = append(o.R.ValidatorEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &validatorEventR{
				ContractEvent: o,
			}
		} else {
			rel.R.ContractEvent = o
		}
	}
	return nil
}

// ContractEvents retrieves all the records using an executor.
func ContractEvents(mods ...qm.QueryMod) contractEventQuery {
	mods = append(mods, qm.From("\"contract_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"contract_events\".*"})
	}

	return contractEventQuery{q}
}

// FindContractEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContractEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ContractEvent, error) {
	contractEventObj := &ContractEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contract_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contractEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contract_events")
	}

	if err = contractEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contractEventObj, err
	}

	return contractEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContractEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contract_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contractEventInsertCacheMut.RLock()
	cache, cached := contractEventInsertCache[key]
	contractEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contractEventAllColumns,
			contractEventColumnsWithDefault,
			contractEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contractEventType, contractEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contractEventType, contractEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contract_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contract_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contract_events")
	}

	if !cached {
		contractEventInsertCacheMut.Lock()
		contractEventInsertCache[key] = cache
		contractEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ContractEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContractEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contractEventUpdateCacheMut.RLock()
	cache, cached := contractEventUpdateCache[key]
	contractEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contractEventAllColumns,
			contractEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contract_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contract_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contractEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contractEventType, contractEventMapping, append(wl, contractEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contract_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contract_events")
	}

	if !cached {
		contractEventUpdateCacheMut.Lock()
		contractEventUpdateCache[key] = cache
		contractEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contractEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contract_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contract_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContractEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contract_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contractEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contractEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contractEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContractEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no contract_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contractEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contractEventUpsertCacheMut.RLock()
	cache, cached := contractEventUpsertCache[key]
	contractEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contractEventAllColumns,
			contractEventColumnsWithDefault,
			contractEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contractEventAllColumns,
			contractEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert contract_events, could not build update column list")
		}

		ret := strmangle.SetComplement(contractEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contractEventPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert contract_events, could not build conflict column list")
			}

			conflict = make([]string, len(contractEventPrimaryKeyColumns))
			copy(conflict, contractEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"contract_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contractEventType, contractEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contractEventType, contractEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert contract_events")
	}

	if !cached {
		contractEventUpsertCacheMut.Lock()
		contractEventUpsertCache[key] = cache
		contractEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ContractEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContractEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContractEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contractEventPrimaryKeyMapping)
	sql := "DELETE FROM \"contract_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contract_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contract_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contractEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contractEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contract_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contract_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContractEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contractEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contract_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contractEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contract_events")
	}

	if len(contractEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContractEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContractEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContractEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContractEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contractEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contract_events\".* FROM \"contract_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contractEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContractEventSlice")
	}

	*o = slice

	return nil
}

// ContractEventExists checks if the ContractEvent row exists.
func ContractEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contract_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contract_events exists")
	}

	return exists, nil
}

// Exists checks if the ContractEvent row exists.
func (o *ContractEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContractEventExists(ctx, exec, o.ID)
}
