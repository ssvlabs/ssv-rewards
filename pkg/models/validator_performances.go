// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ValidatorPerformance is an object representing the database table.
type ValidatorPerformance struct {
	Provider              ProviderType `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	Day                   time.Time    `boil:"day" json:"day" toml:"day" yaml:"day"`
	FromEpoch             int          `boil:"from_epoch" json:"from_epoch" toml:"from_epoch" yaml:"from_epoch"`
	ToEpoch               int          `boil:"to_epoch" json:"to_epoch" toml:"to_epoch" yaml:"to_epoch"`
	OwnerAddress          string       `boil:"owner_address" json:"owner_address" toml:"owner_address" yaml:"owner_address"`
	PublicKey             string       `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	SolventWholeDay       bool         `boil:"solvent_whole_day" json:"solvent_whole_day" toml:"solvent_whole_day" yaml:"solvent_whole_day"`
	Index                 null.Int     `boil:"index" json:"index,omitempty" toml:"index" yaml:"index,omitempty"`
	StartBeaconStatus     null.String  `boil:"start_beacon_status" json:"start_beacon_status,omitempty" toml:"start_beacon_status" yaml:"start_beacon_status,omitempty"`
	EndBeaconStatus       null.String  `boil:"end_beacon_status" json:"end_beacon_status,omitempty" toml:"end_beacon_status" yaml:"end_beacon_status,omitempty"`
	Decideds              null.Int     `boil:"decideds" json:"decideds,omitempty" toml:"decideds" yaml:"decideds,omitempty"`
	Effectiveness         null.Float32 `boil:"effectiveness" json:"effectiveness,omitempty" toml:"effectiveness" yaml:"effectiveness,omitempty"`
	AttestationRate       null.Float32 `boil:"attestation_rate" json:"attestation_rate,omitempty" toml:"attestation_rate" yaml:"attestation_rate,omitempty"`
	AttestationsAssigned  null.Int16   `boil:"attestations_assigned" json:"attestations_assigned,omitempty" toml:"attestations_assigned" yaml:"attestations_assigned,omitempty"`
	AttestationsExecuted  null.Int16   `boil:"attestations_executed" json:"attestations_executed,omitempty" toml:"attestations_executed" yaml:"attestations_executed,omitempty"`
	AttestationsMissed    null.Int16   `boil:"attestations_missed" json:"attestations_missed,omitempty" toml:"attestations_missed" yaml:"attestations_missed,omitempty"`
	ProposalsAssigned     null.Int16   `boil:"proposals_assigned" json:"proposals_assigned,omitempty" toml:"proposals_assigned" yaml:"proposals_assigned,omitempty"`
	ProposalsExecuted     null.Int16   `boil:"proposals_executed" json:"proposals_executed,omitempty" toml:"proposals_executed" yaml:"proposals_executed,omitempty"`
	ProposalsMissed       null.Int16   `boil:"proposals_missed" json:"proposals_missed,omitempty" toml:"proposals_missed" yaml:"proposals_missed,omitempty"`
	SyncCommitteeAssigned null.Int16   `boil:"sync_committee_assigned" json:"sync_committee_assigned,omitempty" toml:"sync_committee_assigned" yaml:"sync_committee_assigned,omitempty"`
	SyncCommitteeExecuted null.Int16   `boil:"sync_committee_executed" json:"sync_committee_executed,omitempty" toml:"sync_committee_executed" yaml:"sync_committee_executed,omitempty"`
	SyncCommitteeMissed   null.Int16   `boil:"sync_committee_missed" json:"sync_committee_missed,omitempty" toml:"sync_committee_missed" yaml:"sync_committee_missed,omitempty"`
	EndEffectiveBalance   int64        `boil:"end_effective_balance" json:"end_effective_balance" toml:"end_effective_balance" yaml:"end_effective_balance"`

	R *validatorPerformanceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L validatorPerformanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ValidatorPerformanceColumns = struct {
	Provider              string
	Day                   string
	FromEpoch             string
	ToEpoch               string
	OwnerAddress          string
	PublicKey             string
	SolventWholeDay       string
	Index                 string
	StartBeaconStatus     string
	EndBeaconStatus       string
	Decideds              string
	Effectiveness         string
	AttestationRate       string
	AttestationsAssigned  string
	AttestationsExecuted  string
	AttestationsMissed    string
	ProposalsAssigned     string
	ProposalsExecuted     string
	ProposalsMissed       string
	SyncCommitteeAssigned string
	SyncCommitteeExecuted string
	SyncCommitteeMissed   string
	EndEffectiveBalance   string
}{
	Provider:              "provider",
	Day:                   "day",
	FromEpoch:             "from_epoch",
	ToEpoch:               "to_epoch",
	OwnerAddress:          "owner_address",
	PublicKey:             "public_key",
	SolventWholeDay:       "solvent_whole_day",
	Index:                 "index",
	StartBeaconStatus:     "start_beacon_status",
	EndBeaconStatus:       "end_beacon_status",
	Decideds:              "decideds",
	Effectiveness:         "effectiveness",
	AttestationRate:       "attestation_rate",
	AttestationsAssigned:  "attestations_assigned",
	AttestationsExecuted:  "attestations_executed",
	AttestationsMissed:    "attestations_missed",
	ProposalsAssigned:     "proposals_assigned",
	ProposalsExecuted:     "proposals_executed",
	ProposalsMissed:       "proposals_missed",
	SyncCommitteeAssigned: "sync_committee_assigned",
	SyncCommitteeExecuted: "sync_committee_executed",
	SyncCommitteeMissed:   "sync_committee_missed",
	EndEffectiveBalance:   "end_effective_balance",
}

var ValidatorPerformanceTableColumns = struct {
	Provider              string
	Day                   string
	FromEpoch             string
	ToEpoch               string
	OwnerAddress          string
	PublicKey             string
	SolventWholeDay       string
	Index                 string
	StartBeaconStatus     string
	EndBeaconStatus       string
	Decideds              string
	Effectiveness         string
	AttestationRate       string
	AttestationsAssigned  string
	AttestationsExecuted  string
	AttestationsMissed    string
	ProposalsAssigned     string
	ProposalsExecuted     string
	ProposalsMissed       string
	SyncCommitteeAssigned string
	SyncCommitteeExecuted string
	SyncCommitteeMissed   string
	EndEffectiveBalance   string
}{
	Provider:              "validator_performances.provider",
	Day:                   "validator_performances.day",
	FromEpoch:             "validator_performances.from_epoch",
	ToEpoch:               "validator_performances.to_epoch",
	OwnerAddress:          "validator_performances.owner_address",
	PublicKey:             "validator_performances.public_key",
	SolventWholeDay:       "validator_performances.solvent_whole_day",
	Index:                 "validator_performances.index",
	StartBeaconStatus:     "validator_performances.start_beacon_status",
	EndBeaconStatus:       "validator_performances.end_beacon_status",
	Decideds:              "validator_performances.decideds",
	Effectiveness:         "validator_performances.effectiveness",
	AttestationRate:       "validator_performances.attestation_rate",
	AttestationsAssigned:  "validator_performances.attestations_assigned",
	AttestationsExecuted:  "validator_performances.attestations_executed",
	AttestationsMissed:    "validator_performances.attestations_missed",
	ProposalsAssigned:     "validator_performances.proposals_assigned",
	ProposalsExecuted:     "validator_performances.proposals_executed",
	ProposalsMissed:       "validator_performances.proposals_missed",
	SyncCommitteeAssigned: "validator_performances.sync_committee_assigned",
	SyncCommitteeExecuted: "validator_performances.sync_committee_executed",
	SyncCommitteeMissed:   "validator_performances.sync_committee_missed",
	EndEffectiveBalance:   "validator_performances.end_effective_balance",
}

// Generated where

type whereHelperProviderType struct{ field string }

func (w whereHelperProviderType) EQ(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperProviderType) NEQ(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperProviderType) LT(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperProviderType) LTE(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperProviderType) GT(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperProviderType) GTE(x ProviderType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperProviderType) IN(slice []ProviderType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperProviderType) NIN(slice []ProviderType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ValidatorPerformanceWhere = struct {
	Provider              whereHelperProviderType
	Day                   whereHelpertime_Time
	FromEpoch             whereHelperint
	ToEpoch               whereHelperint
	OwnerAddress          whereHelperstring
	PublicKey             whereHelperstring
	SolventWholeDay       whereHelperbool
	Index                 whereHelpernull_Int
	StartBeaconStatus     whereHelpernull_String
	EndBeaconStatus       whereHelpernull_String
	Decideds              whereHelpernull_Int
	Effectiveness         whereHelpernull_Float32
	AttestationRate       whereHelpernull_Float32
	AttestationsAssigned  whereHelpernull_Int16
	AttestationsExecuted  whereHelpernull_Int16
	AttestationsMissed    whereHelpernull_Int16
	ProposalsAssigned     whereHelpernull_Int16
	ProposalsExecuted     whereHelpernull_Int16
	ProposalsMissed       whereHelpernull_Int16
	SyncCommitteeAssigned whereHelpernull_Int16
	SyncCommitteeExecuted whereHelpernull_Int16
	SyncCommitteeMissed   whereHelpernull_Int16
	EndEffectiveBalance   whereHelperint64
}{
	Provider:              whereHelperProviderType{field: "\"validator_performances\".\"provider\""},
	Day:                   whereHelpertime_Time{field: "\"validator_performances\".\"day\""},
	FromEpoch:             whereHelperint{field: "\"validator_performances\".\"from_epoch\""},
	ToEpoch:               whereHelperint{field: "\"validator_performances\".\"to_epoch\""},
	OwnerAddress:          whereHelperstring{field: "\"validator_performances\".\"owner_address\""},
	PublicKey:             whereHelperstring{field: "\"validator_performances\".\"public_key\""},
	SolventWholeDay:       whereHelperbool{field: "\"validator_performances\".\"solvent_whole_day\""},
	Index:                 whereHelpernull_Int{field: "\"validator_performances\".\"index\""},
	StartBeaconStatus:     whereHelpernull_String{field: "\"validator_performances\".\"start_beacon_status\""},
	EndBeaconStatus:       whereHelpernull_String{field: "\"validator_performances\".\"end_beacon_status\""},
	Decideds:              whereHelpernull_Int{field: "\"validator_performances\".\"decideds\""},
	Effectiveness:         whereHelpernull_Float32{field: "\"validator_performances\".\"effectiveness\""},
	AttestationRate:       whereHelpernull_Float32{field: "\"validator_performances\".\"attestation_rate\""},
	AttestationsAssigned:  whereHelpernull_Int16{field: "\"validator_performances\".\"attestations_assigned\""},
	AttestationsExecuted:  whereHelpernull_Int16{field: "\"validator_performances\".\"attestations_executed\""},
	AttestationsMissed:    whereHelpernull_Int16{field: "\"validator_performances\".\"attestations_missed\""},
	ProposalsAssigned:     whereHelpernull_Int16{field: "\"validator_performances\".\"proposals_assigned\""},
	ProposalsExecuted:     whereHelpernull_Int16{field: "\"validator_performances\".\"proposals_executed\""},
	ProposalsMissed:       whereHelpernull_Int16{field: "\"validator_performances\".\"proposals_missed\""},
	SyncCommitteeAssigned: whereHelpernull_Int16{field: "\"validator_performances\".\"sync_committee_assigned\""},
	SyncCommitteeExecuted: whereHelpernull_Int16{field: "\"validator_performances\".\"sync_committee_executed\""},
	SyncCommitteeMissed:   whereHelpernull_Int16{field: "\"validator_performances\".\"sync_committee_missed\""},
	EndEffectiveBalance:   whereHelperint64{field: "\"validator_performances\".\"end_effective_balance\""},
}

// ValidatorPerformanceRels is where relationship names are stored.
var ValidatorPerformanceRels = struct {
	PublicKeyValidator string
}{
	PublicKeyValidator: "PublicKeyValidator",
}

// validatorPerformanceR is where relationships are stored.
type validatorPerformanceR struct {
	PublicKeyValidator *Validator `boil:"PublicKeyValidator" json:"PublicKeyValidator" toml:"PublicKeyValidator" yaml:"PublicKeyValidator"`
}

// NewStruct creates a new relationship struct
func (*validatorPerformanceR) NewStruct() *validatorPerformanceR {
	return &validatorPerformanceR{}
}

func (r *validatorPerformanceR) GetPublicKeyValidator() *Validator {
	if r == nil {
		return nil
	}
	return r.PublicKeyValidator
}

// validatorPerformanceL is where Load methods for each relationship are stored.
type validatorPerformanceL struct{}

var (
	validatorPerformanceAllColumns            = []string{"provider", "day", "from_epoch", "to_epoch", "owner_address", "public_key", "solvent_whole_day", "index", "start_beacon_status", "end_beacon_status", "decideds", "effectiveness", "attestation_rate", "attestations_assigned", "attestations_executed", "attestations_missed", "proposals_assigned", "proposals_executed", "proposals_missed", "sync_committee_assigned", "sync_committee_executed", "sync_committee_missed", "end_effective_balance"}
	validatorPerformanceColumnsWithoutDefault = []string{"provider", "day", "from_epoch", "to_epoch", "owner_address", "public_key", "solvent_whole_day"}
	validatorPerformanceColumnsWithDefault    = []string{"index", "start_beacon_status", "end_beacon_status", "decideds", "effectiveness", "attestation_rate", "attestations_assigned", "attestations_executed", "attestations_missed", "proposals_assigned", "proposals_executed", "proposals_missed", "sync_committee_assigned", "sync_committee_executed", "sync_committee_missed", "end_effective_balance"}
	validatorPerformancePrimaryKeyColumns     = []string{"provider", "day", "public_key"}
	validatorPerformanceGeneratedColumns      = []string{}
)

type (
	// ValidatorPerformanceSlice is an alias for a slice of pointers to ValidatorPerformance.
	// This should almost always be used instead of []ValidatorPerformance.
	ValidatorPerformanceSlice []*ValidatorPerformance
	// ValidatorPerformanceHook is the signature for custom ValidatorPerformance hook methods
	ValidatorPerformanceHook func(context.Context, boil.ContextExecutor, *ValidatorPerformance) error

	validatorPerformanceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	validatorPerformanceType                 = reflect.TypeOf(&ValidatorPerformance{})
	validatorPerformanceMapping              = queries.MakeStructMapping(validatorPerformanceType)
	validatorPerformancePrimaryKeyMapping, _ = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, validatorPerformancePrimaryKeyColumns)
	validatorPerformanceInsertCacheMut       sync.RWMutex
	validatorPerformanceInsertCache          = make(map[string]insertCache)
	validatorPerformanceUpdateCacheMut       sync.RWMutex
	validatorPerformanceUpdateCache          = make(map[string]updateCache)
	validatorPerformanceUpsertCacheMut       sync.RWMutex
	validatorPerformanceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var validatorPerformanceAfterSelectMu sync.Mutex
var validatorPerformanceAfterSelectHooks []ValidatorPerformanceHook

var validatorPerformanceBeforeInsertMu sync.Mutex
var validatorPerformanceBeforeInsertHooks []ValidatorPerformanceHook
var validatorPerformanceAfterInsertMu sync.Mutex
var validatorPerformanceAfterInsertHooks []ValidatorPerformanceHook

var validatorPerformanceBeforeUpdateMu sync.Mutex
var validatorPerformanceBeforeUpdateHooks []ValidatorPerformanceHook
var validatorPerformanceAfterUpdateMu sync.Mutex
var validatorPerformanceAfterUpdateHooks []ValidatorPerformanceHook

var validatorPerformanceBeforeDeleteMu sync.Mutex
var validatorPerformanceBeforeDeleteHooks []ValidatorPerformanceHook
var validatorPerformanceAfterDeleteMu sync.Mutex
var validatorPerformanceAfterDeleteHooks []ValidatorPerformanceHook

var validatorPerformanceBeforeUpsertMu sync.Mutex
var validatorPerformanceBeforeUpsertHooks []ValidatorPerformanceHook
var validatorPerformanceAfterUpsertMu sync.Mutex
var validatorPerformanceAfterUpsertHooks []ValidatorPerformanceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ValidatorPerformance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ValidatorPerformance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ValidatorPerformance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ValidatorPerformance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ValidatorPerformance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ValidatorPerformance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ValidatorPerformance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ValidatorPerformance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ValidatorPerformance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorPerformanceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddValidatorPerformanceHook registers your hook function for all future operations.
func AddValidatorPerformanceHook(hookPoint boil.HookPoint, validatorPerformanceHook ValidatorPerformanceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		validatorPerformanceAfterSelectMu.Lock()
		validatorPerformanceAfterSelectHooks = append(validatorPerformanceAfterSelectHooks, validatorPerformanceHook)
		validatorPerformanceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		validatorPerformanceBeforeInsertMu.Lock()
		validatorPerformanceBeforeInsertHooks = append(validatorPerformanceBeforeInsertHooks, validatorPerformanceHook)
		validatorPerformanceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		validatorPerformanceAfterInsertMu.Lock()
		validatorPerformanceAfterInsertHooks = append(validatorPerformanceAfterInsertHooks, validatorPerformanceHook)
		validatorPerformanceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		validatorPerformanceBeforeUpdateMu.Lock()
		validatorPerformanceBeforeUpdateHooks = append(validatorPerformanceBeforeUpdateHooks, validatorPerformanceHook)
		validatorPerformanceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		validatorPerformanceAfterUpdateMu.Lock()
		validatorPerformanceAfterUpdateHooks = append(validatorPerformanceAfterUpdateHooks, validatorPerformanceHook)
		validatorPerformanceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		validatorPerformanceBeforeDeleteMu.Lock()
		validatorPerformanceBeforeDeleteHooks = append(validatorPerformanceBeforeDeleteHooks, validatorPerformanceHook)
		validatorPerformanceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		validatorPerformanceAfterDeleteMu.Lock()
		validatorPerformanceAfterDeleteHooks = append(validatorPerformanceAfterDeleteHooks, validatorPerformanceHook)
		validatorPerformanceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		validatorPerformanceBeforeUpsertMu.Lock()
		validatorPerformanceBeforeUpsertHooks = append(validatorPerformanceBeforeUpsertHooks, validatorPerformanceHook)
		validatorPerformanceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		validatorPerformanceAfterUpsertMu.Lock()
		validatorPerformanceAfterUpsertHooks = append(validatorPerformanceAfterUpsertHooks, validatorPerformanceHook)
		validatorPerformanceAfterUpsertMu.Unlock()
	}
}

// One returns a single validatorPerformance record from the query.
func (q validatorPerformanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ValidatorPerformance, error) {
	o := &ValidatorPerformance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for validator_performances")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ValidatorPerformance records from the query.
func (q validatorPerformanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ValidatorPerformanceSlice, error) {
	var o []*ValidatorPerformance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ValidatorPerformance slice")
	}

	if len(validatorPerformanceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ValidatorPerformance records in the query.
func (q validatorPerformanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count validator_performances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q validatorPerformanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if validator_performances exists")
	}

	return count > 0, nil
}

// PublicKeyValidator pointed to by the foreign key.
func (o *ValidatorPerformance) PublicKeyValidator(mods ...qm.QueryMod) validatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"public_key\" = ?", o.PublicKey),
	}

	queryMods = append(queryMods, mods...)

	return Validators(queryMods...)
}

// LoadPublicKeyValidator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (validatorPerformanceL) LoadPublicKeyValidator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidatorPerformance interface{}, mods queries.Applicator) error {
	var slice []*ValidatorPerformance
	var object *ValidatorPerformance

	if singular {
		var ok bool
		object, ok = maybeValidatorPerformance.(*ValidatorPerformance)
		if !ok {
			object = new(ValidatorPerformance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidatorPerformance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidatorPerformance))
			}
		}
	} else {
		s, ok := maybeValidatorPerformance.(*[]*ValidatorPerformance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidatorPerformance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidatorPerformance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorPerformanceR{}
		}
		args[object.PublicKey] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorPerformanceR{}
			}

			args[obj.PublicKey] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validators`),
		qm.WhereIn(`validators.public_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Validator")
	}

	var resultSlice []*Validator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Validator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for validators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validators")
	}

	if len(validatorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PublicKeyValidator = foreign
		if foreign.R == nil {
			foreign.R = &validatorR{}
		}
		foreign.R.PublicKeyValidatorPerformances = append(foreign.R.PublicKeyValidatorPerformances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublicKey == foreign.PublicKey {
				local.R.PublicKeyValidator = foreign
				if foreign.R == nil {
					foreign.R = &validatorR{}
				}
				foreign.R.PublicKeyValidatorPerformances = append(foreign.R.PublicKeyValidatorPerformances, local)
				break
			}
		}
	}

	return nil
}

// SetPublicKeyValidator of the validatorPerformance to the related item.
// Sets o.R.PublicKeyValidator to related.
// Adds o to related.R.PublicKeyValidatorPerformances.
func (o *ValidatorPerformance) SetPublicKeyValidator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Validator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"validator_performances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
		strmangle.WhereClause("\"", "\"", 2, validatorPerformancePrimaryKeyColumns),
	)
	values := []interface{}{related.PublicKey, o.Provider, o.Day, o.PublicKey}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublicKey = related.PublicKey
	if o.R == nil {
		o.R = &validatorPerformanceR{
			PublicKeyValidator: related,
		}
	} else {
		o.R.PublicKeyValidator = related
	}

	if related.R == nil {
		related.R = &validatorR{
			PublicKeyValidatorPerformances: ValidatorPerformanceSlice{o},
		}
	} else {
		related.R.PublicKeyValidatorPerformances = append(related.R.PublicKeyValidatorPerformances, o)
	}

	return nil
}

// ValidatorPerformances retrieves all the records using an executor.
func ValidatorPerformances(mods ...qm.QueryMod) validatorPerformanceQuery {
	mods = append(mods, qm.From("\"validator_performances\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"validator_performances\".*"})
	}

	return validatorPerformanceQuery{q}
}

// FindValidatorPerformance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindValidatorPerformance(ctx context.Context, exec boil.ContextExecutor, provider ProviderType, day time.Time, publicKey string, selectCols ...string) (*ValidatorPerformance, error) {
	validatorPerformanceObj := &ValidatorPerformance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"validator_performances\" where \"provider\"=$1 AND \"day\"=$2 AND \"public_key\"=$3", sel,
	)

	q := queries.Raw(query, provider, day, publicKey)

	err := q.Bind(ctx, exec, validatorPerformanceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from validator_performances")
	}

	if err = validatorPerformanceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return validatorPerformanceObj, err
	}

	return validatorPerformanceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ValidatorPerformance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no validator_performances provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorPerformanceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	validatorPerformanceInsertCacheMut.RLock()
	cache, cached := validatorPerformanceInsertCache[key]
	validatorPerformanceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			validatorPerformanceAllColumns,
			validatorPerformanceColumnsWithDefault,
			validatorPerformanceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"validator_performances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"validator_performances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into validator_performances")
	}

	if !cached {
		validatorPerformanceInsertCacheMut.Lock()
		validatorPerformanceInsertCache[key] = cache
		validatorPerformanceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ValidatorPerformance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ValidatorPerformance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	validatorPerformanceUpdateCacheMut.RLock()
	cache, cached := validatorPerformanceUpdateCache[key]
	validatorPerformanceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			validatorPerformanceAllColumns,
			validatorPerformancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update validator_performances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"validator_performances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, validatorPerformancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, append(wl, validatorPerformancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update validator_performances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for validator_performances")
	}

	if !cached {
		validatorPerformanceUpdateCacheMut.Lock()
		validatorPerformanceUpdateCache[key] = cache
		validatorPerformanceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q validatorPerformanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for validator_performances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for validator_performances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ValidatorPerformanceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPerformancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"validator_performances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, validatorPerformancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in validatorPerformance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all validatorPerformance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ValidatorPerformance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no validator_performances provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorPerformanceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	validatorPerformanceUpsertCacheMut.RLock()
	cache, cached := validatorPerformanceUpsertCache[key]
	validatorPerformanceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			validatorPerformanceAllColumns,
			validatorPerformanceColumnsWithDefault,
			validatorPerformanceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			validatorPerformanceAllColumns,
			validatorPerformancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert validator_performances, could not build update column list")
		}

		ret := strmangle.SetComplement(validatorPerformanceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(validatorPerformancePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert validator_performances, could not build conflict column list")
			}

			conflict = make([]string, len(validatorPerformancePrimaryKeyColumns))
			copy(conflict, validatorPerformancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"validator_performances\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(validatorPerformanceType, validatorPerformanceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert validator_performances")
	}

	if !cached {
		validatorPerformanceUpsertCacheMut.Lock()
		validatorPerformanceUpsertCache[key] = cache
		validatorPerformanceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ValidatorPerformance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ValidatorPerformance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ValidatorPerformance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), validatorPerformancePrimaryKeyMapping)
	sql := "DELETE FROM \"validator_performances\" WHERE \"provider\"=$1 AND \"day\"=$2 AND \"public_key\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from validator_performances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for validator_performances")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q validatorPerformanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no validatorPerformanceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validator_performances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_performances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ValidatorPerformanceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(validatorPerformanceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPerformancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"validator_performances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorPerformancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validatorPerformance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_performances")
	}

	if len(validatorPerformanceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ValidatorPerformance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindValidatorPerformance(ctx, exec, o.Provider, o.Day, o.PublicKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ValidatorPerformanceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ValidatorPerformanceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorPerformancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"validator_performances\".* FROM \"validator_performances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorPerformancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ValidatorPerformanceSlice")
	}

	*o = slice

	return nil
}

// ValidatorPerformanceExists checks if the ValidatorPerformance row exists.
func ValidatorPerformanceExists(ctx context.Context, exec boil.ContextExecutor, provider ProviderType, day time.Time, publicKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"validator_performances\" where \"provider\"=$1 AND \"day\"=$2 AND \"public_key\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, provider, day, publicKey)
	}
	row := exec.QueryRowContext(ctx, sql, provider, day, publicKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if validator_performances exists")
	}

	return exists, nil
}

// Exists checks if the ValidatorPerformance row exists.
func (o *ValidatorPerformance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ValidatorPerformanceExists(ctx, exec, o.Provider, o.Day, o.PublicKey)
}
