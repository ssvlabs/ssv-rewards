// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ValidatorEvent is an object representing the database table.
type ValidatorEvent struct {
	ID              int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ContractEventID int       `boil:"contract_event_id" json:"contract_event_id" toml:"contract_event_id" yaml:"contract_event_id"`
	Slot            int       `boil:"slot" json:"slot" toml:"slot" yaml:"slot"`
	BlockNumber     int       `boil:"block_number" json:"block_number" toml:"block_number" yaml:"block_number"`
	BlockTime       time.Time `boil:"block_time" json:"block_time" toml:"block_time" yaml:"block_time"`
	LogIndex        int       `boil:"log_index" json:"log_index" toml:"log_index" yaml:"log_index"`
	PublicKey       string    `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	OwnerAddress    string    `boil:"owner_address" json:"owner_address" toml:"owner_address" yaml:"owner_address"`
	EventName       string    `boil:"event_name" json:"event_name" toml:"event_name" yaml:"event_name"`
	Activated       bool      `boil:"activated" json:"activated" toml:"activated" yaml:"activated"`

	R *validatorEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L validatorEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ValidatorEventColumns = struct {
	ID              string
	ContractEventID string
	Slot            string
	BlockNumber     string
	BlockTime       string
	LogIndex        string
	PublicKey       string
	OwnerAddress    string
	EventName       string
	Activated       string
}{
	ID:              "id",
	ContractEventID: "contract_event_id",
	Slot:            "slot",
	BlockNumber:     "block_number",
	BlockTime:       "block_time",
	LogIndex:        "log_index",
	PublicKey:       "public_key",
	OwnerAddress:    "owner_address",
	EventName:       "event_name",
	Activated:       "activated",
}

var ValidatorEventTableColumns = struct {
	ID              string
	ContractEventID string
	Slot            string
	BlockNumber     string
	BlockTime       string
	LogIndex        string
	PublicKey       string
	OwnerAddress    string
	EventName       string
	Activated       string
}{
	ID:              "validator_events.id",
	ContractEventID: "validator_events.contract_event_id",
	Slot:            "validator_events.slot",
	BlockNumber:     "validator_events.block_number",
	BlockTime:       "validator_events.block_time",
	LogIndex:        "validator_events.log_index",
	PublicKey:       "validator_events.public_key",
	OwnerAddress:    "validator_events.owner_address",
	EventName:       "validator_events.event_name",
	Activated:       "validator_events.activated",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ValidatorEventWhere = struct {
	ID              whereHelperint
	ContractEventID whereHelperint
	Slot            whereHelperint
	BlockNumber     whereHelperint
	BlockTime       whereHelpertime_Time
	LogIndex        whereHelperint
	PublicKey       whereHelperstring
	OwnerAddress    whereHelperstring
	EventName       whereHelperstring
	Activated       whereHelperbool
}{
	ID:              whereHelperint{field: "\"validator_events\".\"id\""},
	ContractEventID: whereHelperint{field: "\"validator_events\".\"contract_event_id\""},
	Slot:            whereHelperint{field: "\"validator_events\".\"slot\""},
	BlockNumber:     whereHelperint{field: "\"validator_events\".\"block_number\""},
	BlockTime:       whereHelpertime_Time{field: "\"validator_events\".\"block_time\""},
	LogIndex:        whereHelperint{field: "\"validator_events\".\"log_index\""},
	PublicKey:       whereHelperstring{field: "\"validator_events\".\"public_key\""},
	OwnerAddress:    whereHelperstring{field: "\"validator_events\".\"owner_address\""},
	EventName:       whereHelperstring{field: "\"validator_events\".\"event_name\""},
	Activated:       whereHelperbool{field: "\"validator_events\".\"activated\""},
}

// ValidatorEventRels is where relationship names are stored.
var ValidatorEventRels = struct {
	ContractEvent      string
	PublicKeyValidator string
}{
	ContractEvent:      "ContractEvent",
	PublicKeyValidator: "PublicKeyValidator",
}

// validatorEventR is where relationships are stored.
type validatorEventR struct {
	ContractEvent      *ContractEvent `boil:"ContractEvent" json:"ContractEvent" toml:"ContractEvent" yaml:"ContractEvent"`
	PublicKeyValidator *Validator     `boil:"PublicKeyValidator" json:"PublicKeyValidator" toml:"PublicKeyValidator" yaml:"PublicKeyValidator"`
}

// NewStruct creates a new relationship struct
func (*validatorEventR) NewStruct() *validatorEventR {
	return &validatorEventR{}
}

func (r *validatorEventR) GetContractEvent() *ContractEvent {
	if r == nil {
		return nil
	}
	return r.ContractEvent
}

func (r *validatorEventR) GetPublicKeyValidator() *Validator {
	if r == nil {
		return nil
	}
	return r.PublicKeyValidator
}

// validatorEventL is where Load methods for each relationship are stored.
type validatorEventL struct{}

var (
	validatorEventAllColumns            = []string{"id", "contract_event_id", "slot", "block_number", "block_time", "log_index", "public_key", "owner_address", "event_name", "activated"}
	validatorEventColumnsWithoutDefault = []string{"contract_event_id", "slot", "block_number", "block_time", "log_index", "public_key", "owner_address", "event_name", "activated"}
	validatorEventColumnsWithDefault    = []string{"id"}
	validatorEventPrimaryKeyColumns     = []string{"id"}
	validatorEventGeneratedColumns      = []string{}
)

type (
	// ValidatorEventSlice is an alias for a slice of pointers to ValidatorEvent.
	// This should almost always be used instead of []ValidatorEvent.
	ValidatorEventSlice []*ValidatorEvent
	// ValidatorEventHook is the signature for custom ValidatorEvent hook methods
	ValidatorEventHook func(context.Context, boil.ContextExecutor, *ValidatorEvent) error

	validatorEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	validatorEventType                 = reflect.TypeOf(&ValidatorEvent{})
	validatorEventMapping              = queries.MakeStructMapping(validatorEventType)
	validatorEventPrimaryKeyMapping, _ = queries.BindMapping(validatorEventType, validatorEventMapping, validatorEventPrimaryKeyColumns)
	validatorEventInsertCacheMut       sync.RWMutex
	validatorEventInsertCache          = make(map[string]insertCache)
	validatorEventUpdateCacheMut       sync.RWMutex
	validatorEventUpdateCache          = make(map[string]updateCache)
	validatorEventUpsertCacheMut       sync.RWMutex
	validatorEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var validatorEventAfterSelectMu sync.Mutex
var validatorEventAfterSelectHooks []ValidatorEventHook

var validatorEventBeforeInsertMu sync.Mutex
var validatorEventBeforeInsertHooks []ValidatorEventHook
var validatorEventAfterInsertMu sync.Mutex
var validatorEventAfterInsertHooks []ValidatorEventHook

var validatorEventBeforeUpdateMu sync.Mutex
var validatorEventBeforeUpdateHooks []ValidatorEventHook
var validatorEventAfterUpdateMu sync.Mutex
var validatorEventAfterUpdateHooks []ValidatorEventHook

var validatorEventBeforeDeleteMu sync.Mutex
var validatorEventBeforeDeleteHooks []ValidatorEventHook
var validatorEventAfterDeleteMu sync.Mutex
var validatorEventAfterDeleteHooks []ValidatorEventHook

var validatorEventBeforeUpsertMu sync.Mutex
var validatorEventBeforeUpsertHooks []ValidatorEventHook
var validatorEventAfterUpsertMu sync.Mutex
var validatorEventAfterUpsertHooks []ValidatorEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ValidatorEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ValidatorEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ValidatorEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ValidatorEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ValidatorEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ValidatorEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ValidatorEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ValidatorEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ValidatorEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range validatorEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddValidatorEventHook registers your hook function for all future operations.
func AddValidatorEventHook(hookPoint boil.HookPoint, validatorEventHook ValidatorEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		validatorEventAfterSelectMu.Lock()
		validatorEventAfterSelectHooks = append(validatorEventAfterSelectHooks, validatorEventHook)
		validatorEventAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		validatorEventBeforeInsertMu.Lock()
		validatorEventBeforeInsertHooks = append(validatorEventBeforeInsertHooks, validatorEventHook)
		validatorEventBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		validatorEventAfterInsertMu.Lock()
		validatorEventAfterInsertHooks = append(validatorEventAfterInsertHooks, validatorEventHook)
		validatorEventAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		validatorEventBeforeUpdateMu.Lock()
		validatorEventBeforeUpdateHooks = append(validatorEventBeforeUpdateHooks, validatorEventHook)
		validatorEventBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		validatorEventAfterUpdateMu.Lock()
		validatorEventAfterUpdateHooks = append(validatorEventAfterUpdateHooks, validatorEventHook)
		validatorEventAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		validatorEventBeforeDeleteMu.Lock()
		validatorEventBeforeDeleteHooks = append(validatorEventBeforeDeleteHooks, validatorEventHook)
		validatorEventBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		validatorEventAfterDeleteMu.Lock()
		validatorEventAfterDeleteHooks = append(validatorEventAfterDeleteHooks, validatorEventHook)
		validatorEventAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		validatorEventBeforeUpsertMu.Lock()
		validatorEventBeforeUpsertHooks = append(validatorEventBeforeUpsertHooks, validatorEventHook)
		validatorEventBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		validatorEventAfterUpsertMu.Lock()
		validatorEventAfterUpsertHooks = append(validatorEventAfterUpsertHooks, validatorEventHook)
		validatorEventAfterUpsertMu.Unlock()
	}
}

// One returns a single validatorEvent record from the query.
func (q validatorEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ValidatorEvent, error) {
	o := &ValidatorEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for validator_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ValidatorEvent records from the query.
func (q validatorEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (ValidatorEventSlice, error) {
	var o []*ValidatorEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ValidatorEvent slice")
	}

	if len(validatorEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ValidatorEvent records in the query.
func (q validatorEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count validator_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q validatorEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if validator_events exists")
	}

	return count > 0, nil
}

// ContractEvent pointed to by the foreign key.
func (o *ValidatorEvent) ContractEvent(mods ...qm.QueryMod) contractEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContractEventID),
	}

	queryMods = append(queryMods, mods...)

	return ContractEvents(queryMods...)
}

// PublicKeyValidator pointed to by the foreign key.
func (o *ValidatorEvent) PublicKeyValidator(mods ...qm.QueryMod) validatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"public_key\" = ?", o.PublicKey),
	}

	queryMods = append(queryMods, mods...)

	return Validators(queryMods...)
}

// LoadContractEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (validatorEventL) LoadContractEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidatorEvent interface{}, mods queries.Applicator) error {
	var slice []*ValidatorEvent
	var object *ValidatorEvent

	if singular {
		var ok bool
		object, ok = maybeValidatorEvent.(*ValidatorEvent)
		if !ok {
			object = new(ValidatorEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidatorEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidatorEvent))
			}
		}
	} else {
		s, ok := maybeValidatorEvent.(*[]*ValidatorEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidatorEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidatorEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorEventR{}
		}
		args[object.ContractEventID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorEventR{}
			}

			args[obj.ContractEventID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`contract_events`),
		qm.WhereIn(`contract_events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContractEvent")
	}

	var resultSlice []*ContractEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContractEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contract_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contract_events")
	}

	if len(contractEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractEvent = foreign
		if foreign.R == nil {
			foreign.R = &contractEventR{}
		}
		foreign.R.ValidatorEvents = append(foreign.R.ValidatorEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContractEventID == foreign.ID {
				local.R.ContractEvent = foreign
				if foreign.R == nil {
					foreign.R = &contractEventR{}
				}
				foreign.R.ValidatorEvents = append(foreign.R.ValidatorEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadPublicKeyValidator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (validatorEventL) LoadPublicKeyValidator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeValidatorEvent interface{}, mods queries.Applicator) error {
	var slice []*ValidatorEvent
	var object *ValidatorEvent

	if singular {
		var ok bool
		object, ok = maybeValidatorEvent.(*ValidatorEvent)
		if !ok {
			object = new(ValidatorEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeValidatorEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeValidatorEvent))
			}
		}
	} else {
		s, ok := maybeValidatorEvent.(*[]*ValidatorEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeValidatorEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeValidatorEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &validatorEventR{}
		}
		args[object.PublicKey] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &validatorEventR{}
			}

			args[obj.PublicKey] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`validators`),
		qm.WhereIn(`validators.public_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Validator")
	}

	var resultSlice []*Validator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Validator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for validators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validators")
	}

	if len(validatorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PublicKeyValidator = foreign
		if foreign.R == nil {
			foreign.R = &validatorR{}
		}
		foreign.R.PublicKeyValidatorEvents = append(foreign.R.PublicKeyValidatorEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublicKey == foreign.PublicKey {
				local.R.PublicKeyValidator = foreign
				if foreign.R == nil {
					foreign.R = &validatorR{}
				}
				foreign.R.PublicKeyValidatorEvents = append(foreign.R.PublicKeyValidatorEvents, local)
				break
			}
		}
	}

	return nil
}

// SetContractEvent of the validatorEvent to the related item.
// Sets o.R.ContractEvent to related.
// Adds o to related.R.ValidatorEvents.
func (o *ValidatorEvent) SetContractEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContractEvent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"validator_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contract_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, validatorEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContractEventID = related.ID
	if o.R == nil {
		o.R = &validatorEventR{
			ContractEvent: related,
		}
	} else {
		o.R.ContractEvent = related
	}

	if related.R == nil {
		related.R = &contractEventR{
			ValidatorEvents: ValidatorEventSlice{o},
		}
	} else {
		related.R.ValidatorEvents = append(related.R.ValidatorEvents, o)
	}

	return nil
}

// SetPublicKeyValidator of the validatorEvent to the related item.
// Sets o.R.PublicKeyValidator to related.
// Adds o to related.R.PublicKeyValidatorEvents.
func (o *ValidatorEvent) SetPublicKeyValidator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Validator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"validator_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"public_key"}),
		strmangle.WhereClause("\"", "\"", 2, validatorEventPrimaryKeyColumns),
	)
	values := []interface{}{related.PublicKey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublicKey = related.PublicKey
	if o.R == nil {
		o.R = &validatorEventR{
			PublicKeyValidator: related,
		}
	} else {
		o.R.PublicKeyValidator = related
	}

	if related.R == nil {
		related.R = &validatorR{
			PublicKeyValidatorEvents: ValidatorEventSlice{o},
		}
	} else {
		related.R.PublicKeyValidatorEvents = append(related.R.PublicKeyValidatorEvents, o)
	}

	return nil
}

// ValidatorEvents retrieves all the records using an executor.
func ValidatorEvents(mods ...qm.QueryMod) validatorEventQuery {
	mods = append(mods, qm.From("\"validator_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"validator_events\".*"})
	}

	return validatorEventQuery{q}
}

// FindValidatorEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindValidatorEvent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ValidatorEvent, error) {
	validatorEventObj := &ValidatorEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"validator_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, validatorEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from validator_events")
	}

	if err = validatorEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return validatorEventObj, err
	}

	return validatorEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ValidatorEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no validator_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	validatorEventInsertCacheMut.RLock()
	cache, cached := validatorEventInsertCache[key]
	validatorEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			validatorEventAllColumns,
			validatorEventColumnsWithDefault,
			validatorEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(validatorEventType, validatorEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(validatorEventType, validatorEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"validator_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"validator_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into validator_events")
	}

	if !cached {
		validatorEventInsertCacheMut.Lock()
		validatorEventInsertCache[key] = cache
		validatorEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ValidatorEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ValidatorEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	validatorEventUpdateCacheMut.RLock()
	cache, cached := validatorEventUpdateCache[key]
	validatorEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			validatorEventAllColumns,
			validatorEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update validator_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"validator_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, validatorEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(validatorEventType, validatorEventMapping, append(wl, validatorEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update validator_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for validator_events")
	}

	if !cached {
		validatorEventUpdateCacheMut.Lock()
		validatorEventUpdateCache[key] = cache
		validatorEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q validatorEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for validator_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for validator_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ValidatorEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"validator_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, validatorEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in validatorEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all validatorEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ValidatorEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no validator_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(validatorEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	validatorEventUpsertCacheMut.RLock()
	cache, cached := validatorEventUpsertCache[key]
	validatorEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			validatorEventAllColumns,
			validatorEventColumnsWithDefault,
			validatorEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			validatorEventAllColumns,
			validatorEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert validator_events, could not build update column list")
		}

		ret := strmangle.SetComplement(validatorEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(validatorEventPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert validator_events, could not build conflict column list")
			}

			conflict = make([]string, len(validatorEventPrimaryKeyColumns))
			copy(conflict, validatorEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"validator_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(validatorEventType, validatorEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(validatorEventType, validatorEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert validator_events")
	}

	if !cached {
		validatorEventUpsertCacheMut.Lock()
		validatorEventUpsertCache[key] = cache
		validatorEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ValidatorEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ValidatorEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ValidatorEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), validatorEventPrimaryKeyMapping)
	sql := "DELETE FROM \"validator_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from validator_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for validator_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q validatorEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no validatorEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validator_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ValidatorEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(validatorEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"validator_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from validatorEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for validator_events")
	}

	if len(validatorEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ValidatorEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindValidatorEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ValidatorEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ValidatorEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), validatorEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"validator_events\".* FROM \"validator_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, validatorEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ValidatorEventSlice")
	}

	*o = slice

	return nil
}

// ValidatorEventExists checks if the ValidatorEvent row exists.
func ValidatorEventExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"validator_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if validator_events exists")
	}

	return exists, nil
}

// Exists checks if the ValidatorEvent row exists.
func (o *ValidatorEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ValidatorEventExists(ctx, exec, o.ID)
}
